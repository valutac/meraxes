// Code generated by go-swagger; DO NOT EDIT.

package stickers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/olebedev/go-tgbot/models"
)

// AddStickerToSetLinkReader is a Reader for the AddStickerToSetLink structure.
type AddStickerToSetLinkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddStickerToSetLinkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddStickerToSetLinkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddStickerToSetLinkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAddStickerToSetLinkUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddStickerToSetLinkForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAddStickerToSetLinkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 420:
		result := NewAddStickerToSetLinkEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAddStickerToSetLinkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddStickerToSetLinkOK creates a AddStickerToSetLinkOK with default headers values
func NewAddStickerToSetLinkOK() *AddStickerToSetLinkOK {
	return &AddStickerToSetLinkOK{}
}

/*AddStickerToSetLinkOK handles this case with default header values.

AddStickerToSetLinkOK add sticker to set link o k
*/
type AddStickerToSetLinkOK struct {
	Payload *models.ResponseBool
}

func (o *AddStickerToSetLinkOK) Error() string {
	return fmt.Sprintf("[POST /bot{token}/addStickerToSet#link][%d] addStickerToSetLinkOK  %+v", 200, o.Payload)
}

func (o *AddStickerToSetLinkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseBool)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddStickerToSetLinkBadRequest creates a AddStickerToSetLinkBadRequest with default headers values
func NewAddStickerToSetLinkBadRequest() *AddStickerToSetLinkBadRequest {
	return &AddStickerToSetLinkBadRequest{}
}

/*AddStickerToSetLinkBadRequest handles this case with default header values.

Bad Request
*/
type AddStickerToSetLinkBadRequest struct {
	Payload *models.Error
}

func (o *AddStickerToSetLinkBadRequest) Error() string {
	return fmt.Sprintf("[POST /bot{token}/addStickerToSet#link][%d] addStickerToSetLinkBadRequest  %+v", 400, o.Payload)
}

func (o *AddStickerToSetLinkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddStickerToSetLinkUnauthorized creates a AddStickerToSetLinkUnauthorized with default headers values
func NewAddStickerToSetLinkUnauthorized() *AddStickerToSetLinkUnauthorized {
	return &AddStickerToSetLinkUnauthorized{}
}

/*AddStickerToSetLinkUnauthorized handles this case with default header values.

Unauthorized
*/
type AddStickerToSetLinkUnauthorized struct {
	Payload *models.Error
}

func (o *AddStickerToSetLinkUnauthorized) Error() string {
	return fmt.Sprintf("[POST /bot{token}/addStickerToSet#link][%d] addStickerToSetLinkUnauthorized  %+v", 401, o.Payload)
}

func (o *AddStickerToSetLinkUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddStickerToSetLinkForbidden creates a AddStickerToSetLinkForbidden with default headers values
func NewAddStickerToSetLinkForbidden() *AddStickerToSetLinkForbidden {
	return &AddStickerToSetLinkForbidden{}
}

/*AddStickerToSetLinkForbidden handles this case with default header values.

Forbidden
*/
type AddStickerToSetLinkForbidden struct {
	Payload *models.Error
}

func (o *AddStickerToSetLinkForbidden) Error() string {
	return fmt.Sprintf("[POST /bot{token}/addStickerToSet#link][%d] addStickerToSetLinkForbidden  %+v", 403, o.Payload)
}

func (o *AddStickerToSetLinkForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddStickerToSetLinkNotFound creates a AddStickerToSetLinkNotFound with default headers values
func NewAddStickerToSetLinkNotFound() *AddStickerToSetLinkNotFound {
	return &AddStickerToSetLinkNotFound{}
}

/*AddStickerToSetLinkNotFound handles this case with default header values.

Not Found
*/
type AddStickerToSetLinkNotFound struct {
	Payload *models.Error
}

func (o *AddStickerToSetLinkNotFound) Error() string {
	return fmt.Sprintf("[POST /bot{token}/addStickerToSet#link][%d] addStickerToSetLinkNotFound  %+v", 404, o.Payload)
}

func (o *AddStickerToSetLinkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddStickerToSetLinkEnhanceYourCalm creates a AddStickerToSetLinkEnhanceYourCalm with default headers values
func NewAddStickerToSetLinkEnhanceYourCalm() *AddStickerToSetLinkEnhanceYourCalm {
	return &AddStickerToSetLinkEnhanceYourCalm{}
}

/*AddStickerToSetLinkEnhanceYourCalm handles this case with default header values.

Flood
*/
type AddStickerToSetLinkEnhanceYourCalm struct {
	Payload *models.Error
}

func (o *AddStickerToSetLinkEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[POST /bot{token}/addStickerToSet#link][%d] addStickerToSetLinkEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *AddStickerToSetLinkEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddStickerToSetLinkInternalServerError creates a AddStickerToSetLinkInternalServerError with default headers values
func NewAddStickerToSetLinkInternalServerError() *AddStickerToSetLinkInternalServerError {
	return &AddStickerToSetLinkInternalServerError{}
}

/*AddStickerToSetLinkInternalServerError handles this case with default header values.

Internal
*/
type AddStickerToSetLinkInternalServerError struct {
	Payload *models.Error
}

func (o *AddStickerToSetLinkInternalServerError) Error() string {
	return fmt.Sprintf("[POST /bot{token}/addStickerToSet#link][%d] addStickerToSetLinkInternalServerError  %+v", 500, o.Payload)
}

func (o *AddStickerToSetLinkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
