// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// AllowedUpdate allowed update
// swagger:model AllowedUpdate
type AllowedUpdate string

const (
	// AllowedUpdateMessage captures enum value "message"
	AllowedUpdateMessage AllowedUpdate = "message"
	// AllowedUpdateEditedMessage captures enum value "edited_message"
	AllowedUpdateEditedMessage AllowedUpdate = "edited_message"
	// AllowedUpdateChannelPost captures enum value "channel_post"
	AllowedUpdateChannelPost AllowedUpdate = "channel_post"
	// AllowedUpdateEditedChannelPost captures enum value "edited_channel_post"
	AllowedUpdateEditedChannelPost AllowedUpdate = "edited_channel_post"
	// AllowedUpdateInlineQuery captures enum value "inline_query"
	AllowedUpdateInlineQuery AllowedUpdate = "inline_query"
	// AllowedUpdateChosenInlineResult captures enum value "chosen_inline_result"
	AllowedUpdateChosenInlineResult AllowedUpdate = "chosen_inline_result"
	// AllowedUpdateCallbackQuery captures enum value "callback_query"
	AllowedUpdateCallbackQuery AllowedUpdate = "callback_query"
	// AllowedUpdateShippingQuery captures enum value "shipping_query"
	AllowedUpdateShippingQuery AllowedUpdate = "shipping_query"
	// AllowedUpdatePreCheckoutQuery captures enum value "pre_checkout_query"
	AllowedUpdatePreCheckoutQuery AllowedUpdate = "pre_checkout_query"
)

// for schema
var allowedUpdateEnum []interface{}

func init() {
	var res []AllowedUpdate
	if err := json.Unmarshal([]byte(`["message","edited_message","channel_post","edited_channel_post","inline_query","chosen_inline_result","callback_query","shipping_query","pre_checkout_query"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		allowedUpdateEnum = append(allowedUpdateEnum, v)
	}
}

func (m AllowedUpdate) validateAllowedUpdateEnum(path, location string, value AllowedUpdate) error {
	if err := validate.Enum(path, location, value, allowedUpdateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this allowed update
func (m AllowedUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAllowedUpdateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
