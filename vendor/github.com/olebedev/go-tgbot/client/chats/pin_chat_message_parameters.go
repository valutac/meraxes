// Code generated by go-swagger; DO NOT EDIT.

package chats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPinChatMessageParams creates a new PinChatMessageParams object
// with the default values initialized.
func NewPinChatMessageParams() *PinChatMessageParams {
	var ()
	return &PinChatMessageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPinChatMessageParamsWithTimeout creates a new PinChatMessageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPinChatMessageParamsWithTimeout(timeout time.Duration) *PinChatMessageParams {
	var ()
	return &PinChatMessageParams{

		timeout: timeout,
	}
}

// NewPinChatMessageParamsWithContext creates a new PinChatMessageParams object
// with the default values initialized, and the ability to set a context for a request
func NewPinChatMessageParamsWithContext(ctx context.Context) *PinChatMessageParams {
	var ()
	return &PinChatMessageParams{

		Context: ctx,
	}
}

// NewPinChatMessageParamsWithHTTPClient creates a new PinChatMessageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPinChatMessageParamsWithHTTPClient(client *http.Client) *PinChatMessageParams {
	var ()
	return &PinChatMessageParams{
		HTTPClient: client,
	}
}

/*PinChatMessageParams contains all the parameters to send to the API endpoint
for the pin chat message operation typically these are written to a http.Request
*/
type PinChatMessageParams struct {

	/*ChatID*/
	ChatID string
	/*DisableNotification*/
	DisableNotification *bool
	/*MessageID*/
	MessageID int64
	/*Token
	  bot's token to authorize the request

	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the pin chat message params
func (o *PinChatMessageParams) WithTimeout(timeout time.Duration) *PinChatMessageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pin chat message params
func (o *PinChatMessageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pin chat message params
func (o *PinChatMessageParams) WithContext(ctx context.Context) *PinChatMessageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pin chat message params
func (o *PinChatMessageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pin chat message params
func (o *PinChatMessageParams) WithHTTPClient(client *http.Client) *PinChatMessageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pin chat message params
func (o *PinChatMessageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChatID adds the chatID to the pin chat message params
func (o *PinChatMessageParams) WithChatID(chatID string) *PinChatMessageParams {
	o.SetChatID(chatID)
	return o
}

// SetChatID adds the chatId to the pin chat message params
func (o *PinChatMessageParams) SetChatID(chatID string) {
	o.ChatID = chatID
}

// WithDisableNotification adds the disableNotification to the pin chat message params
func (o *PinChatMessageParams) WithDisableNotification(disableNotification *bool) *PinChatMessageParams {
	o.SetDisableNotification(disableNotification)
	return o
}

// SetDisableNotification adds the disableNotification to the pin chat message params
func (o *PinChatMessageParams) SetDisableNotification(disableNotification *bool) {
	o.DisableNotification = disableNotification
}

// WithMessageID adds the messageID to the pin chat message params
func (o *PinChatMessageParams) WithMessageID(messageID int64) *PinChatMessageParams {
	o.SetMessageID(messageID)
	return o
}

// SetMessageID adds the messageId to the pin chat message params
func (o *PinChatMessageParams) SetMessageID(messageID int64) {
	o.MessageID = messageID
}

// WithToken adds the token to the pin chat message params
func (o *PinChatMessageParams) WithToken(token *string) *PinChatMessageParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the pin chat message params
func (o *PinChatMessageParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *PinChatMessageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param chat_id
	qrChatID := o.ChatID
	qChatID := qrChatID
	if qChatID != "" {
		if err := r.SetQueryParam("chat_id", qChatID); err != nil {
			return err
		}
	}

	if o.DisableNotification != nil {

		// query param disable_notification
		var qrDisableNotification bool
		if o.DisableNotification != nil {
			qrDisableNotification = *o.DisableNotification
		}
		qDisableNotification := swag.FormatBool(qrDisableNotification)
		if qDisableNotification != "" {
			if err := r.SetQueryParam("disable_notification", qDisableNotification); err != nil {
				return err
			}
		}

	}

	// query param message_id
	qrMessageID := o.MessageID
	qMessageID := swag.FormatInt64(qrMessageID)
	if qMessageID != "" {
		if err := r.SetQueryParam("message_id", qMessageID); err != nil {
			return err
		}
	}

	if o.Token != nil {

		// path param token
		if err := r.SetPathParam("token", *o.Token); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
