// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MaskPosition mask position
// swagger:model MaskPosition
type MaskPosition struct {

	// point
	Point string `json:"point,omitempty"`

	// x shift
	XShift float64 `json:"x_shift,omitempty"`

	// y shift
	YShift float64 `json:"y_shift,omitempty"`

	// zoom
	Zoom float64 `json:"zoom,omitempty"`
}

// Validate validates this mask position
func (m *MaskPosition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePoint(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var maskPositionTypePointPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["forehead","eyes","mouth","chin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		maskPositionTypePointPropEnum = append(maskPositionTypePointPropEnum, v)
	}
}

const (
	// MaskPositionPointForehead captures enum value "forehead"
	MaskPositionPointForehead string = "forehead"
	// MaskPositionPointEyes captures enum value "eyes"
	MaskPositionPointEyes string = "eyes"
	// MaskPositionPointMouth captures enum value "mouth"
	MaskPositionPointMouth string = "mouth"
	// MaskPositionPointChin captures enum value "chin"
	MaskPositionPointChin string = "chin"
)

// prop value enum
func (m *MaskPosition) validatePointEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, maskPositionTypePointPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MaskPosition) validatePoint(formats strfmt.Registry) error {

	if swag.IsZero(m.Point) { // not required
		return nil
	}

	// value enum
	if err := m.validatePointEnum("point", "body", m.Point); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MaskPosition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaskPosition) UnmarshalBinary(b []byte) error {
	var res MaskPosition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
