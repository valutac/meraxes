// Code generated by go-swagger; DO NOT EDIT.

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new payments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AnswerPreCheckoutQuery answer pre checkout query API
*/
func (a *Client) AnswerPreCheckoutQuery(params *AnswerPreCheckoutQueryParams) (*AnswerPreCheckoutQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnswerPreCheckoutQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "answerPreCheckoutQuery",
		Method:             "GET",
		PathPattern:        "/bot{token}/answerPreCheckoutQuery",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AnswerPreCheckoutQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AnswerPreCheckoutQueryOK), nil

}

/*
AnswerShippingQuery answer shipping query API
*/
func (a *Client) AnswerShippingQuery(params *AnswerShippingQueryParams) (*AnswerShippingQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnswerShippingQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "answerShippingQuery",
		Method:             "POST",
		PathPattern:        "/bot{token}/answerShippingQuery",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AnswerShippingQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AnswerShippingQueryOK), nil

}

/*
SendInvoice send invoice API
*/
func (a *Client) SendInvoice(params *SendInvoiceParams) (*SendInvoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendInvoiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendInvoice",
		Method:             "POST",
		PathPattern:        "/bot{token}/sendInvoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendInvoiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SendInvoiceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
