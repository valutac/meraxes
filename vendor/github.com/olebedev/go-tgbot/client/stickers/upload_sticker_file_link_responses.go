// Code generated by go-swagger; DO NOT EDIT.

package stickers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/olebedev/go-tgbot/models"
)

// UploadStickerFileLinkReader is a Reader for the UploadStickerFileLink structure.
type UploadStickerFileLinkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadStickerFileLinkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUploadStickerFileLinkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUploadStickerFileLinkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUploadStickerFileLinkUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUploadStickerFileLinkForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUploadStickerFileLinkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 420:
		result := NewUploadStickerFileLinkEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUploadStickerFileLinkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUploadStickerFileLinkOK creates a UploadStickerFileLinkOK with default headers values
func NewUploadStickerFileLinkOK() *UploadStickerFileLinkOK {
	return &UploadStickerFileLinkOK{}
}

/*UploadStickerFileLinkOK handles this case with default header values.

UploadStickerFileLinkOK upload sticker file link o k
*/
type UploadStickerFileLinkOK struct {
	Payload *models.File
}

func (o *UploadStickerFileLinkOK) Error() string {
	return fmt.Sprintf("[POST /bot{token}/uploadStickerFile#link][%d] uploadStickerFileLinkOK  %+v", 200, o.Payload)
}

func (o *UploadStickerFileLinkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.File)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadStickerFileLinkBadRequest creates a UploadStickerFileLinkBadRequest with default headers values
func NewUploadStickerFileLinkBadRequest() *UploadStickerFileLinkBadRequest {
	return &UploadStickerFileLinkBadRequest{}
}

/*UploadStickerFileLinkBadRequest handles this case with default header values.

Bad Request
*/
type UploadStickerFileLinkBadRequest struct {
	Payload *models.Error
}

func (o *UploadStickerFileLinkBadRequest) Error() string {
	return fmt.Sprintf("[POST /bot{token}/uploadStickerFile#link][%d] uploadStickerFileLinkBadRequest  %+v", 400, o.Payload)
}

func (o *UploadStickerFileLinkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadStickerFileLinkUnauthorized creates a UploadStickerFileLinkUnauthorized with default headers values
func NewUploadStickerFileLinkUnauthorized() *UploadStickerFileLinkUnauthorized {
	return &UploadStickerFileLinkUnauthorized{}
}

/*UploadStickerFileLinkUnauthorized handles this case with default header values.

Unauthorized
*/
type UploadStickerFileLinkUnauthorized struct {
	Payload *models.Error
}

func (o *UploadStickerFileLinkUnauthorized) Error() string {
	return fmt.Sprintf("[POST /bot{token}/uploadStickerFile#link][%d] uploadStickerFileLinkUnauthorized  %+v", 401, o.Payload)
}

func (o *UploadStickerFileLinkUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadStickerFileLinkForbidden creates a UploadStickerFileLinkForbidden with default headers values
func NewUploadStickerFileLinkForbidden() *UploadStickerFileLinkForbidden {
	return &UploadStickerFileLinkForbidden{}
}

/*UploadStickerFileLinkForbidden handles this case with default header values.

Forbidden
*/
type UploadStickerFileLinkForbidden struct {
	Payload *models.Error
}

func (o *UploadStickerFileLinkForbidden) Error() string {
	return fmt.Sprintf("[POST /bot{token}/uploadStickerFile#link][%d] uploadStickerFileLinkForbidden  %+v", 403, o.Payload)
}

func (o *UploadStickerFileLinkForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadStickerFileLinkNotFound creates a UploadStickerFileLinkNotFound with default headers values
func NewUploadStickerFileLinkNotFound() *UploadStickerFileLinkNotFound {
	return &UploadStickerFileLinkNotFound{}
}

/*UploadStickerFileLinkNotFound handles this case with default header values.

Not Found
*/
type UploadStickerFileLinkNotFound struct {
	Payload *models.Error
}

func (o *UploadStickerFileLinkNotFound) Error() string {
	return fmt.Sprintf("[POST /bot{token}/uploadStickerFile#link][%d] uploadStickerFileLinkNotFound  %+v", 404, o.Payload)
}

func (o *UploadStickerFileLinkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadStickerFileLinkEnhanceYourCalm creates a UploadStickerFileLinkEnhanceYourCalm with default headers values
func NewUploadStickerFileLinkEnhanceYourCalm() *UploadStickerFileLinkEnhanceYourCalm {
	return &UploadStickerFileLinkEnhanceYourCalm{}
}

/*UploadStickerFileLinkEnhanceYourCalm handles this case with default header values.

Flood
*/
type UploadStickerFileLinkEnhanceYourCalm struct {
	Payload *models.Error
}

func (o *UploadStickerFileLinkEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[POST /bot{token}/uploadStickerFile#link][%d] uploadStickerFileLinkEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *UploadStickerFileLinkEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadStickerFileLinkInternalServerError creates a UploadStickerFileLinkInternalServerError with default headers values
func NewUploadStickerFileLinkInternalServerError() *UploadStickerFileLinkInternalServerError {
	return &UploadStickerFileLinkInternalServerError{}
}

/*UploadStickerFileLinkInternalServerError handles this case with default header values.

Internal
*/
type UploadStickerFileLinkInternalServerError struct {
	Payload *models.Error
}

func (o *UploadStickerFileLinkInternalServerError) Error() string {
	return fmt.Sprintf("[POST /bot{token}/uploadStickerFile#link][%d] uploadStickerFileLinkInternalServerError  %+v", 500, o.Payload)
}

func (o *UploadStickerFileLinkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
