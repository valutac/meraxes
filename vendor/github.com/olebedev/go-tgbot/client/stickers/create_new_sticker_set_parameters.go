// Code generated by go-swagger; DO NOT EDIT.

package stickers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCreateNewStickerSetParams creates a new CreateNewStickerSetParams object
// with the default values initialized.
func NewCreateNewStickerSetParams() *CreateNewStickerSetParams {
	var ()
	return &CreateNewStickerSetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateNewStickerSetParamsWithTimeout creates a new CreateNewStickerSetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateNewStickerSetParamsWithTimeout(timeout time.Duration) *CreateNewStickerSetParams {
	var ()
	return &CreateNewStickerSetParams{

		timeout: timeout,
	}
}

// NewCreateNewStickerSetParamsWithContext creates a new CreateNewStickerSetParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateNewStickerSetParamsWithContext(ctx context.Context) *CreateNewStickerSetParams {
	var ()
	return &CreateNewStickerSetParams{

		Context: ctx,
	}
}

// NewCreateNewStickerSetParamsWithHTTPClient creates a new CreateNewStickerSetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateNewStickerSetParamsWithHTTPClient(client *http.Client) *CreateNewStickerSetParams {
	var ()
	return &CreateNewStickerSetParams{
		HTTPClient: client,
	}
}

/*CreateNewStickerSetParams contains all the parameters to send to the API endpoint
for the create new sticker set operation typically these are written to a http.Request
*/
type CreateNewStickerSetParams struct {

	/*Emojis*/
	Emojis string
	/*IsMasks*/
	IsMasks *bool
	/*MaskPosition
	  Serialized to JSON MaskPosition

	*/
	MaskPosition *string
	/*Name*/
	Name string
	/*PngSticker*/
	PngSticker runtime.NamedReadCloser
	/*Title*/
	Title string
	/*Token
	  bot's token to authorize the request

	*/
	Token *string
	/*UserID*/
	UserID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create new sticker set params
func (o *CreateNewStickerSetParams) WithTimeout(timeout time.Duration) *CreateNewStickerSetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create new sticker set params
func (o *CreateNewStickerSetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create new sticker set params
func (o *CreateNewStickerSetParams) WithContext(ctx context.Context) *CreateNewStickerSetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create new sticker set params
func (o *CreateNewStickerSetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create new sticker set params
func (o *CreateNewStickerSetParams) WithHTTPClient(client *http.Client) *CreateNewStickerSetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create new sticker set params
func (o *CreateNewStickerSetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmojis adds the emojis to the create new sticker set params
func (o *CreateNewStickerSetParams) WithEmojis(emojis string) *CreateNewStickerSetParams {
	o.SetEmojis(emojis)
	return o
}

// SetEmojis adds the emojis to the create new sticker set params
func (o *CreateNewStickerSetParams) SetEmojis(emojis string) {
	o.Emojis = emojis
}

// WithIsMasks adds the isMasks to the create new sticker set params
func (o *CreateNewStickerSetParams) WithIsMasks(isMasks *bool) *CreateNewStickerSetParams {
	o.SetIsMasks(isMasks)
	return o
}

// SetIsMasks adds the isMasks to the create new sticker set params
func (o *CreateNewStickerSetParams) SetIsMasks(isMasks *bool) {
	o.IsMasks = isMasks
}

// WithMaskPosition adds the maskPosition to the create new sticker set params
func (o *CreateNewStickerSetParams) WithMaskPosition(maskPosition *string) *CreateNewStickerSetParams {
	o.SetMaskPosition(maskPosition)
	return o
}

// SetMaskPosition adds the maskPosition to the create new sticker set params
func (o *CreateNewStickerSetParams) SetMaskPosition(maskPosition *string) {
	o.MaskPosition = maskPosition
}

// WithName adds the name to the create new sticker set params
func (o *CreateNewStickerSetParams) WithName(name string) *CreateNewStickerSetParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the create new sticker set params
func (o *CreateNewStickerSetParams) SetName(name string) {
	o.Name = name
}

// WithPngSticker adds the pngSticker to the create new sticker set params
func (o *CreateNewStickerSetParams) WithPngSticker(pngSticker runtime.NamedReadCloser) *CreateNewStickerSetParams {
	o.SetPngSticker(pngSticker)
	return o
}

// SetPngSticker adds the pngSticker to the create new sticker set params
func (o *CreateNewStickerSetParams) SetPngSticker(pngSticker runtime.NamedReadCloser) {
	o.PngSticker = pngSticker
}

// WithTitle adds the title to the create new sticker set params
func (o *CreateNewStickerSetParams) WithTitle(title string) *CreateNewStickerSetParams {
	o.SetTitle(title)
	return o
}

// SetTitle adds the title to the create new sticker set params
func (o *CreateNewStickerSetParams) SetTitle(title string) {
	o.Title = title
}

// WithToken adds the token to the create new sticker set params
func (o *CreateNewStickerSetParams) WithToken(token *string) *CreateNewStickerSetParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the create new sticker set params
func (o *CreateNewStickerSetParams) SetToken(token *string) {
	o.Token = token
}

// WithUserID adds the userID to the create new sticker set params
func (o *CreateNewStickerSetParams) WithUserID(userID int64) *CreateNewStickerSetParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the create new sticker set params
func (o *CreateNewStickerSetParams) SetUserID(userID int64) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateNewStickerSetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param emojis
	frEmojis := o.Emojis
	fEmojis := frEmojis
	if fEmojis != "" {
		if err := r.SetFormParam("emojis", fEmojis); err != nil {
			return err
		}
	}

	if o.IsMasks != nil {

		// form param is_masks
		var frIsMasks bool
		if o.IsMasks != nil {
			frIsMasks = *o.IsMasks
		}
		fIsMasks := swag.FormatBool(frIsMasks)
		if fIsMasks != "" {
			if err := r.SetFormParam("is_masks", fIsMasks); err != nil {
				return err
			}
		}

	}

	if o.MaskPosition != nil {

		// form param mask_position
		var frMaskPosition string
		if o.MaskPosition != nil {
			frMaskPosition = *o.MaskPosition
		}
		fMaskPosition := frMaskPosition
		if fMaskPosition != "" {
			if err := r.SetFormParam("mask_position", fMaskPosition); err != nil {
				return err
			}
		}

	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	// form file param png_sticker
	if err := r.SetFileParam("png_sticker", o.PngSticker); err != nil {
		return err
	}

	// form param title
	frTitle := o.Title
	fTitle := frTitle
	if fTitle != "" {
		if err := r.SetFormParam("title", fTitle); err != nil {
			return err
		}
	}

	if o.Token != nil {

		// path param token
		if err := r.SetPathParam("token", *o.Token); err != nil {
			return err
		}

	}

	// form param user_id
	frUserID := o.UserID
	fUserID := swag.FormatInt64(frUserID)
	if fUserID != "" {
		if err := r.SetFormParam("user_id", fUserID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
