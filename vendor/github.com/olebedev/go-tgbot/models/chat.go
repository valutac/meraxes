// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Chat chat
// swagger:model Chat
type Chat struct {

	// all members are administrators
	AllMembersAreAdministrators bool `json:"all_members_are_administrators,omitempty"`

	// can set sticker set
	CanSetStickerSet bool `json:"can_set_sticker_set,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// id
	// Required: true
	ID int64 `json:"id"`

	// invite link
	InviteLink string `json:"invite_link,omitempty"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// photo
	Photo *ChatPhoto `json:"photo,omitempty"`

	// pinned message
	PinnedMessage *Message `json:"pinned_message,omitempty"`

	// sticker set name
	StickerSetName string `json:"sticker_set_name,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this chat
func (m *Chat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePhoto(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePinnedMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Chat) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Chat) validatePhoto(formats strfmt.Registry) error {

	if swag.IsZero(m.Photo) { // not required
		return nil
	}

	if m.Photo != nil {

		if err := m.Photo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("photo")
			}
			return err
		}
	}

	return nil
}

func (m *Chat) validatePinnedMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.PinnedMessage) { // not required
		return nil
	}

	if m.PinnedMessage != nil {

		if err := m.PinnedMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pinned_message")
			}
			return err
		}
	}

	return nil
}

var chatTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["private","group","supergroup","channel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chatTypeTypePropEnum = append(chatTypeTypePropEnum, v)
	}
}

const (
	// ChatTypePrivate captures enum value "private"
	ChatTypePrivate string = "private"
	// ChatTypeGroup captures enum value "group"
	ChatTypeGroup string = "group"
	// ChatTypeSupergroup captures enum value "supergroup"
	ChatTypeSupergroup string = "supergroup"
	// ChatTypeChannel captures enum value "channel"
	ChatTypeChannel string = "channel"
)

// prop value enum
func (m *Chat) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, chatTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Chat) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Chat) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Chat) UnmarshalBinary(b []byte) error {
	var res Chat
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
