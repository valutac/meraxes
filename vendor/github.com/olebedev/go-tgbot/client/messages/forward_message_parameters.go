// Code generated by go-swagger; DO NOT EDIT.

package messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewForwardMessageParams creates a new ForwardMessageParams object
// with the default values initialized.
func NewForwardMessageParams() *ForwardMessageParams {
	var ()
	return &ForwardMessageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewForwardMessageParamsWithTimeout creates a new ForwardMessageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewForwardMessageParamsWithTimeout(timeout time.Duration) *ForwardMessageParams {
	var ()
	return &ForwardMessageParams{

		timeout: timeout,
	}
}

// NewForwardMessageParamsWithContext creates a new ForwardMessageParams object
// with the default values initialized, and the ability to set a context for a request
func NewForwardMessageParamsWithContext(ctx context.Context) *ForwardMessageParams {
	var ()
	return &ForwardMessageParams{

		Context: ctx,
	}
}

// NewForwardMessageParamsWithHTTPClient creates a new ForwardMessageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewForwardMessageParamsWithHTTPClient(client *http.Client) *ForwardMessageParams {
	var ()
	return &ForwardMessageParams{
		HTTPClient: client,
	}
}

/*ForwardMessageParams contains all the parameters to send to the API endpoint
for the forward message operation typically these are written to a http.Request
*/
type ForwardMessageParams struct {

	/*ChatID*/
	ChatID string
	/*DisableNotification*/
	DisableNotification *bool
	/*FromChatID*/
	FromChatID string
	/*MessageID*/
	MessageID int64
	/*Token
	  bot's token to authorize the request

	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the forward message params
func (o *ForwardMessageParams) WithTimeout(timeout time.Duration) *ForwardMessageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the forward message params
func (o *ForwardMessageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the forward message params
func (o *ForwardMessageParams) WithContext(ctx context.Context) *ForwardMessageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the forward message params
func (o *ForwardMessageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the forward message params
func (o *ForwardMessageParams) WithHTTPClient(client *http.Client) *ForwardMessageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the forward message params
func (o *ForwardMessageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChatID adds the chatID to the forward message params
func (o *ForwardMessageParams) WithChatID(chatID string) *ForwardMessageParams {
	o.SetChatID(chatID)
	return o
}

// SetChatID adds the chatId to the forward message params
func (o *ForwardMessageParams) SetChatID(chatID string) {
	o.ChatID = chatID
}

// WithDisableNotification adds the disableNotification to the forward message params
func (o *ForwardMessageParams) WithDisableNotification(disableNotification *bool) *ForwardMessageParams {
	o.SetDisableNotification(disableNotification)
	return o
}

// SetDisableNotification adds the disableNotification to the forward message params
func (o *ForwardMessageParams) SetDisableNotification(disableNotification *bool) {
	o.DisableNotification = disableNotification
}

// WithFromChatID adds the fromChatID to the forward message params
func (o *ForwardMessageParams) WithFromChatID(fromChatID string) *ForwardMessageParams {
	o.SetFromChatID(fromChatID)
	return o
}

// SetFromChatID adds the fromChatId to the forward message params
func (o *ForwardMessageParams) SetFromChatID(fromChatID string) {
	o.FromChatID = fromChatID
}

// WithMessageID adds the messageID to the forward message params
func (o *ForwardMessageParams) WithMessageID(messageID int64) *ForwardMessageParams {
	o.SetMessageID(messageID)
	return o
}

// SetMessageID adds the messageId to the forward message params
func (o *ForwardMessageParams) SetMessageID(messageID int64) {
	o.MessageID = messageID
}

// WithToken adds the token to the forward message params
func (o *ForwardMessageParams) WithToken(token *string) *ForwardMessageParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the forward message params
func (o *ForwardMessageParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *ForwardMessageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param chat_id
	frChatID := o.ChatID
	fChatID := frChatID
	if fChatID != "" {
		if err := r.SetFormParam("chat_id", fChatID); err != nil {
			return err
		}
	}

	if o.DisableNotification != nil {

		// form param disable_notification
		var frDisableNotification bool
		if o.DisableNotification != nil {
			frDisableNotification = *o.DisableNotification
		}
		fDisableNotification := swag.FormatBool(frDisableNotification)
		if fDisableNotification != "" {
			if err := r.SetFormParam("disable_notification", fDisableNotification); err != nil {
				return err
			}
		}

	}

	// form param from_chat_id
	frFromChatID := o.FromChatID
	fFromChatID := frFromChatID
	if fFromChatID != "" {
		if err := r.SetFormParam("from_chat_id", fFromChatID); err != nil {
			return err
		}
	}

	// form param message_id
	frMessageID := o.MessageID
	fMessageID := swag.FormatInt64(frMessageID)
	if fMessageID != "" {
		if err := r.SetFormParam("message_id", fMessageID); err != nil {
			return err
		}
	}

	if o.Token != nil {

		// path param token
		if err := r.SetPathParam("token", *o.Token); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
