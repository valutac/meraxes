// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InputMediaPhoto input media photo
// swagger:model InputMediaPhoto
type InputMediaPhoto struct {

	// caption
	Caption string `json:"caption,omitempty"`

	// media
	// Required: true
	Media string `json:"media"`

	// parse mode
	ParseMode ParseMode `json:"parse_mode,omitempty"`

	// type
	// Required: true
	Type string `json:"type"`
}

// Validate validates this input media photo
func (m *InputMediaPhoto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMedia(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParseMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InputMediaPhoto) validateMedia(formats strfmt.Registry) error {

	if err := validate.RequiredString("media", "body", string(m.Media)); err != nil {
		return err
	}

	return nil
}

func (m *InputMediaPhoto) validateParseMode(formats strfmt.Registry) error {

	if swag.IsZero(m.ParseMode) { // not required
		return nil
	}

	if err := m.ParseMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parse_mode")
		}
		return err
	}

	return nil
}

func (m *InputMediaPhoto) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InputMediaPhoto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InputMediaPhoto) UnmarshalBinary(b []byte) error {
	var res InputMediaPhoto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
