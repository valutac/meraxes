// Code generated by go-swagger; DO NOT EDIT.

package games

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetGameHighScoresParams creates a new GetGameHighScoresParams object
// with the default values initialized.
func NewGetGameHighScoresParams() *GetGameHighScoresParams {
	var ()
	return &GetGameHighScoresParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetGameHighScoresParamsWithTimeout creates a new GetGameHighScoresParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetGameHighScoresParamsWithTimeout(timeout time.Duration) *GetGameHighScoresParams {
	var ()
	return &GetGameHighScoresParams{

		timeout: timeout,
	}
}

// NewGetGameHighScoresParamsWithContext creates a new GetGameHighScoresParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetGameHighScoresParamsWithContext(ctx context.Context) *GetGameHighScoresParams {
	var ()
	return &GetGameHighScoresParams{

		Context: ctx,
	}
}

// NewGetGameHighScoresParamsWithHTTPClient creates a new GetGameHighScoresParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetGameHighScoresParamsWithHTTPClient(client *http.Client) *GetGameHighScoresParams {
	var ()
	return &GetGameHighScoresParams{
		HTTPClient: client,
	}
}

/*GetGameHighScoresParams contains all the parameters to send to the API endpoint
for the get game high scores operation typically these are written to a http.Request
*/
type GetGameHighScoresParams struct {

	/*ChatID*/
	ChatID *int64
	/*InlineMessageID*/
	InlineMessageID *string
	/*MessageID*/
	MessageID *int64
	/*Token
	  bot's token to authorize the request

	*/
	Token *string
	/*UserID*/
	UserID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get game high scores params
func (o *GetGameHighScoresParams) WithTimeout(timeout time.Duration) *GetGameHighScoresParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get game high scores params
func (o *GetGameHighScoresParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get game high scores params
func (o *GetGameHighScoresParams) WithContext(ctx context.Context) *GetGameHighScoresParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get game high scores params
func (o *GetGameHighScoresParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get game high scores params
func (o *GetGameHighScoresParams) WithHTTPClient(client *http.Client) *GetGameHighScoresParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get game high scores params
func (o *GetGameHighScoresParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChatID adds the chatID to the get game high scores params
func (o *GetGameHighScoresParams) WithChatID(chatID *int64) *GetGameHighScoresParams {
	o.SetChatID(chatID)
	return o
}

// SetChatID adds the chatId to the get game high scores params
func (o *GetGameHighScoresParams) SetChatID(chatID *int64) {
	o.ChatID = chatID
}

// WithInlineMessageID adds the inlineMessageID to the get game high scores params
func (o *GetGameHighScoresParams) WithInlineMessageID(inlineMessageID *string) *GetGameHighScoresParams {
	o.SetInlineMessageID(inlineMessageID)
	return o
}

// SetInlineMessageID adds the inlineMessageId to the get game high scores params
func (o *GetGameHighScoresParams) SetInlineMessageID(inlineMessageID *string) {
	o.InlineMessageID = inlineMessageID
}

// WithMessageID adds the messageID to the get game high scores params
func (o *GetGameHighScoresParams) WithMessageID(messageID *int64) *GetGameHighScoresParams {
	o.SetMessageID(messageID)
	return o
}

// SetMessageID adds the messageId to the get game high scores params
func (o *GetGameHighScoresParams) SetMessageID(messageID *int64) {
	o.MessageID = messageID
}

// WithToken adds the token to the get game high scores params
func (o *GetGameHighScoresParams) WithToken(token *string) *GetGameHighScoresParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the get game high scores params
func (o *GetGameHighScoresParams) SetToken(token *string) {
	o.Token = token
}

// WithUserID adds the userID to the get game high scores params
func (o *GetGameHighScoresParams) WithUserID(userID int64) *GetGameHighScoresParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get game high scores params
func (o *GetGameHighScoresParams) SetUserID(userID int64) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetGameHighScoresParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ChatID != nil {

		// query param chat_id
		var qrChatID int64
		if o.ChatID != nil {
			qrChatID = *o.ChatID
		}
		qChatID := swag.FormatInt64(qrChatID)
		if qChatID != "" {
			if err := r.SetQueryParam("chat_id", qChatID); err != nil {
				return err
			}
		}

	}

	if o.InlineMessageID != nil {

		// query param inline_message_id
		var qrInlineMessageID string
		if o.InlineMessageID != nil {
			qrInlineMessageID = *o.InlineMessageID
		}
		qInlineMessageID := qrInlineMessageID
		if qInlineMessageID != "" {
			if err := r.SetQueryParam("inline_message_id", qInlineMessageID); err != nil {
				return err
			}
		}

	}

	if o.MessageID != nil {

		// query param message_id
		var qrMessageID int64
		if o.MessageID != nil {
			qrMessageID = *o.MessageID
		}
		qMessageID := swag.FormatInt64(qrMessageID)
		if qMessageID != "" {
			if err := r.SetQueryParam("message_id", qMessageID); err != nil {
				return err
			}
		}

	}

	if o.Token != nil {

		// path param token
		if err := r.SetPathParam("token", *o.Token); err != nil {
			return err
		}

	}

	// query param user_id
	qrUserID := o.UserID
	qUserID := swag.FormatInt64(qrUserID)
	if qUserID != "" {
		if err := r.SetQueryParam("user_id", qUserID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
