// Code generated by go-swagger; DO NOT EDIT.

package stickers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new stickers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for stickers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddStickerToSet add sticker to set API
*/
func (a *Client) AddStickerToSet(params *AddStickerToSetParams) (*AddStickerToSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddStickerToSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addStickerToSet",
		Method:             "POST",
		PathPattern:        "/bot{token}/addStickerToSet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddStickerToSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddStickerToSetOK), nil

}

/*
AddStickerToSetLink add sticker to set link API
*/
func (a *Client) AddStickerToSetLink(params *AddStickerToSetLinkParams) (*AddStickerToSetLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddStickerToSetLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addStickerToSetLink",
		Method:             "POST",
		PathPattern:        "/bot{token}/addStickerToSet#link",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddStickerToSetLinkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddStickerToSetLinkOK), nil

}

/*
CreateNewStickerSet create new sticker set API
*/
func (a *Client) CreateNewStickerSet(params *CreateNewStickerSetParams) (*CreateNewStickerSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNewStickerSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNewStickerSet",
		Method:             "POST",
		PathPattern:        "/bot{token}/createNewStickerSet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNewStickerSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNewStickerSetOK), nil

}

/*
CreateNewStickerSetLink create new sticker set link API
*/
func (a *Client) CreateNewStickerSetLink(params *CreateNewStickerSetLinkParams) (*CreateNewStickerSetLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNewStickerSetLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNewStickerSetLink",
		Method:             "POST",
		PathPattern:        "/bot{token}/createNewStickerSet#link",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNewStickerSetLinkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNewStickerSetLinkOK), nil

}

/*
DeleteStickerFromSet delete sticker from set API
*/
func (a *Client) DeleteStickerFromSet(params *DeleteStickerFromSetParams) (*DeleteStickerFromSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStickerFromSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStickerFromSet",
		Method:             "POST",
		PathPattern:        "/bot{token}/deleteStickerFromSet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStickerFromSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteStickerFromSetOK), nil

}

/*
GetStickerSet get sticker set API
*/
func (a *Client) GetStickerSet(params *GetStickerSetParams) (*GetStickerSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStickerSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStickerSet",
		Method:             "GET",
		PathPattern:        "/bot{token}/getStickerSet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStickerSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStickerSetOK), nil

}

/*
SetStickerPositionInSet set sticker position in set API
*/
func (a *Client) SetStickerPositionInSet(params *SetStickerPositionInSetParams) (*SetStickerPositionInSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetStickerPositionInSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setStickerPositionInSet",
		Method:             "POST",
		PathPattern:        "/bot{token}/setStickerPositionInSet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetStickerPositionInSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetStickerPositionInSetOK), nil

}

/*
UploadStickerFile upload sticker file API
*/
func (a *Client) UploadStickerFile(params *UploadStickerFileParams) (*UploadStickerFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadStickerFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadStickerFile",
		Method:             "POST",
		PathPattern:        "/bot{token}/uploadStickerFile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadStickerFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadStickerFileOK), nil

}

/*
UploadStickerFileLink upload sticker file link API
*/
func (a *Client) UploadStickerFileLink(params *UploadStickerFileLinkParams) (*UploadStickerFileLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadStickerFileLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadStickerFileLink",
		Method:             "POST",
		PathPattern:        "/bot{token}/uploadStickerFile#link",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadStickerFileLinkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadStickerFileLinkOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
