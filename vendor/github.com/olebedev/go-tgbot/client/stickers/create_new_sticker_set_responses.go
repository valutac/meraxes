// Code generated by go-swagger; DO NOT EDIT.

package stickers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/olebedev/go-tgbot/models"
)

// CreateNewStickerSetReader is a Reader for the CreateNewStickerSet structure.
type CreateNewStickerSetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNewStickerSetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateNewStickerSetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateNewStickerSetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateNewStickerSetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateNewStickerSetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateNewStickerSetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 420:
		result := NewCreateNewStickerSetEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateNewStickerSetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateNewStickerSetOK creates a CreateNewStickerSetOK with default headers values
func NewCreateNewStickerSetOK() *CreateNewStickerSetOK {
	return &CreateNewStickerSetOK{}
}

/*CreateNewStickerSetOK handles this case with default header values.

CreateNewStickerSetOK create new sticker set o k
*/
type CreateNewStickerSetOK struct {
	Payload *models.File
}

func (o *CreateNewStickerSetOK) Error() string {
	return fmt.Sprintf("[POST /bot{token}/createNewStickerSet][%d] createNewStickerSetOK  %+v", 200, o.Payload)
}

func (o *CreateNewStickerSetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.File)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNewStickerSetBadRequest creates a CreateNewStickerSetBadRequest with default headers values
func NewCreateNewStickerSetBadRequest() *CreateNewStickerSetBadRequest {
	return &CreateNewStickerSetBadRequest{}
}

/*CreateNewStickerSetBadRequest handles this case with default header values.

Bad Request
*/
type CreateNewStickerSetBadRequest struct {
	Payload *models.Error
}

func (o *CreateNewStickerSetBadRequest) Error() string {
	return fmt.Sprintf("[POST /bot{token}/createNewStickerSet][%d] createNewStickerSetBadRequest  %+v", 400, o.Payload)
}

func (o *CreateNewStickerSetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNewStickerSetUnauthorized creates a CreateNewStickerSetUnauthorized with default headers values
func NewCreateNewStickerSetUnauthorized() *CreateNewStickerSetUnauthorized {
	return &CreateNewStickerSetUnauthorized{}
}

/*CreateNewStickerSetUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateNewStickerSetUnauthorized struct {
	Payload *models.Error
}

func (o *CreateNewStickerSetUnauthorized) Error() string {
	return fmt.Sprintf("[POST /bot{token}/createNewStickerSet][%d] createNewStickerSetUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateNewStickerSetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNewStickerSetForbidden creates a CreateNewStickerSetForbidden with default headers values
func NewCreateNewStickerSetForbidden() *CreateNewStickerSetForbidden {
	return &CreateNewStickerSetForbidden{}
}

/*CreateNewStickerSetForbidden handles this case with default header values.

Forbidden
*/
type CreateNewStickerSetForbidden struct {
	Payload *models.Error
}

func (o *CreateNewStickerSetForbidden) Error() string {
	return fmt.Sprintf("[POST /bot{token}/createNewStickerSet][%d] createNewStickerSetForbidden  %+v", 403, o.Payload)
}

func (o *CreateNewStickerSetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNewStickerSetNotFound creates a CreateNewStickerSetNotFound with default headers values
func NewCreateNewStickerSetNotFound() *CreateNewStickerSetNotFound {
	return &CreateNewStickerSetNotFound{}
}

/*CreateNewStickerSetNotFound handles this case with default header values.

Not Found
*/
type CreateNewStickerSetNotFound struct {
	Payload *models.Error
}

func (o *CreateNewStickerSetNotFound) Error() string {
	return fmt.Sprintf("[POST /bot{token}/createNewStickerSet][%d] createNewStickerSetNotFound  %+v", 404, o.Payload)
}

func (o *CreateNewStickerSetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNewStickerSetEnhanceYourCalm creates a CreateNewStickerSetEnhanceYourCalm with default headers values
func NewCreateNewStickerSetEnhanceYourCalm() *CreateNewStickerSetEnhanceYourCalm {
	return &CreateNewStickerSetEnhanceYourCalm{}
}

/*CreateNewStickerSetEnhanceYourCalm handles this case with default header values.

Flood
*/
type CreateNewStickerSetEnhanceYourCalm struct {
	Payload *models.Error
}

func (o *CreateNewStickerSetEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[POST /bot{token}/createNewStickerSet][%d] createNewStickerSetEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *CreateNewStickerSetEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNewStickerSetInternalServerError creates a CreateNewStickerSetInternalServerError with default headers values
func NewCreateNewStickerSetInternalServerError() *CreateNewStickerSetInternalServerError {
	return &CreateNewStickerSetInternalServerError{}
}

/*CreateNewStickerSetInternalServerError handles this case with default header values.

Internal
*/
type CreateNewStickerSetInternalServerError struct {
	Payload *models.Error
}

func (o *CreateNewStickerSetInternalServerError) Error() string {
	return fmt.Sprintf("[POST /bot{token}/createNewStickerSet][%d] createNewStickerSetInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateNewStickerSetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
