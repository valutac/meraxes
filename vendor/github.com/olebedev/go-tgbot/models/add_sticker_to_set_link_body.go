// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddStickerToSetLinkBody add sticker to set link body
// swagger:model AddStickerToSetLinkBody
type AddStickerToSetLinkBody struct {

	// emojis
	// Required: true
	Emojis *string `json:"emojis"`

	// mask position
	MaskPosition *MaskPosition `json:"mask_position,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// png sticker
	// Required: true
	PngSticker *string `json:"png_sticker"`

	// user id
	// Required: true
	UserID *int64 `json:"user_id"`
}

// Validate validates this add sticker to set link body
func (m *AddStickerToSetLinkBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmojis(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaskPosition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePngSticker(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddStickerToSetLinkBody) validateEmojis(formats strfmt.Registry) error {

	if err := validate.Required("emojis", "body", m.Emojis); err != nil {
		return err
	}

	return nil
}

func (m *AddStickerToSetLinkBody) validateMaskPosition(formats strfmt.Registry) error {

	if swag.IsZero(m.MaskPosition) { // not required
		return nil
	}

	if m.MaskPosition != nil {

		if err := m.MaskPosition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mask_position")
			}
			return err
		}
	}

	return nil
}

func (m *AddStickerToSetLinkBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AddStickerToSetLinkBody) validatePngSticker(formats strfmt.Registry) error {

	if err := validate.Required("png_sticker", "body", m.PngSticker); err != nil {
		return err
	}

	return nil
}

func (m *AddStickerToSetLinkBody) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddStickerToSetLinkBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddStickerToSetLinkBody) UnmarshalBinary(b []byte) error {
	var res AddStickerToSetLinkBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
