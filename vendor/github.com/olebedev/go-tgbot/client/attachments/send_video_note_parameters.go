// Code generated by go-swagger; DO NOT EDIT.

package attachments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSendVideoNoteParams creates a new SendVideoNoteParams object
// with the default values initialized.
func NewSendVideoNoteParams() *SendVideoNoteParams {
	var ()
	return &SendVideoNoteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSendVideoNoteParamsWithTimeout creates a new SendVideoNoteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSendVideoNoteParamsWithTimeout(timeout time.Duration) *SendVideoNoteParams {
	var ()
	return &SendVideoNoteParams{

		timeout: timeout,
	}
}

// NewSendVideoNoteParamsWithContext creates a new SendVideoNoteParams object
// with the default values initialized, and the ability to set a context for a request
func NewSendVideoNoteParamsWithContext(ctx context.Context) *SendVideoNoteParams {
	var ()
	return &SendVideoNoteParams{

		Context: ctx,
	}
}

// NewSendVideoNoteParamsWithHTTPClient creates a new SendVideoNoteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSendVideoNoteParamsWithHTTPClient(client *http.Client) *SendVideoNoteParams {
	var ()
	return &SendVideoNoteParams{
		HTTPClient: client,
	}
}

/*SendVideoNoteParams contains all the parameters to send to the API endpoint
for the send video note operation typically these are written to a http.Request
*/
type SendVideoNoteParams struct {

	/*ChatID*/
	ChatID string
	/*DisableNotification*/
	DisableNotification *bool
	/*Duration*/
	Duration *int64
	/*Length*/
	Length *int64
	/*ReplyMarkup
	  json string of reply_markup object

	*/
	ReplyMarkup *string
	/*ReplyToMessageID*/
	ReplyToMessageID *int64
	/*Token
	  bot's token to authorize the request

	*/
	Token *string
	/*VideoNote*/
	VideoNote runtime.NamedReadCloser

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the send video note params
func (o *SendVideoNoteParams) WithTimeout(timeout time.Duration) *SendVideoNoteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the send video note params
func (o *SendVideoNoteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the send video note params
func (o *SendVideoNoteParams) WithContext(ctx context.Context) *SendVideoNoteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the send video note params
func (o *SendVideoNoteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the send video note params
func (o *SendVideoNoteParams) WithHTTPClient(client *http.Client) *SendVideoNoteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the send video note params
func (o *SendVideoNoteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChatID adds the chatID to the send video note params
func (o *SendVideoNoteParams) WithChatID(chatID string) *SendVideoNoteParams {
	o.SetChatID(chatID)
	return o
}

// SetChatID adds the chatId to the send video note params
func (o *SendVideoNoteParams) SetChatID(chatID string) {
	o.ChatID = chatID
}

// WithDisableNotification adds the disableNotification to the send video note params
func (o *SendVideoNoteParams) WithDisableNotification(disableNotification *bool) *SendVideoNoteParams {
	o.SetDisableNotification(disableNotification)
	return o
}

// SetDisableNotification adds the disableNotification to the send video note params
func (o *SendVideoNoteParams) SetDisableNotification(disableNotification *bool) {
	o.DisableNotification = disableNotification
}

// WithDuration adds the duration to the send video note params
func (o *SendVideoNoteParams) WithDuration(duration *int64) *SendVideoNoteParams {
	o.SetDuration(duration)
	return o
}

// SetDuration adds the duration to the send video note params
func (o *SendVideoNoteParams) SetDuration(duration *int64) {
	o.Duration = duration
}

// WithLength adds the length to the send video note params
func (o *SendVideoNoteParams) WithLength(length *int64) *SendVideoNoteParams {
	o.SetLength(length)
	return o
}

// SetLength adds the length to the send video note params
func (o *SendVideoNoteParams) SetLength(length *int64) {
	o.Length = length
}

// WithReplyMarkup adds the replyMarkup to the send video note params
func (o *SendVideoNoteParams) WithReplyMarkup(replyMarkup *string) *SendVideoNoteParams {
	o.SetReplyMarkup(replyMarkup)
	return o
}

// SetReplyMarkup adds the replyMarkup to the send video note params
func (o *SendVideoNoteParams) SetReplyMarkup(replyMarkup *string) {
	o.ReplyMarkup = replyMarkup
}

// WithReplyToMessageID adds the replyToMessageID to the send video note params
func (o *SendVideoNoteParams) WithReplyToMessageID(replyToMessageID *int64) *SendVideoNoteParams {
	o.SetReplyToMessageID(replyToMessageID)
	return o
}

// SetReplyToMessageID adds the replyToMessageId to the send video note params
func (o *SendVideoNoteParams) SetReplyToMessageID(replyToMessageID *int64) {
	o.ReplyToMessageID = replyToMessageID
}

// WithToken adds the token to the send video note params
func (o *SendVideoNoteParams) WithToken(token *string) *SendVideoNoteParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the send video note params
func (o *SendVideoNoteParams) SetToken(token *string) {
	o.Token = token
}

// WithVideoNote adds the videoNote to the send video note params
func (o *SendVideoNoteParams) WithVideoNote(videoNote runtime.NamedReadCloser) *SendVideoNoteParams {
	o.SetVideoNote(videoNote)
	return o
}

// SetVideoNote adds the videoNote to the send video note params
func (o *SendVideoNoteParams) SetVideoNote(videoNote runtime.NamedReadCloser) {
	o.VideoNote = videoNote
}

// WriteToRequest writes these params to a swagger request
func (o *SendVideoNoteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param chat_id
	frChatID := o.ChatID
	fChatID := frChatID
	if fChatID != "" {
		if err := r.SetFormParam("chat_id", fChatID); err != nil {
			return err
		}
	}

	if o.DisableNotification != nil {

		// form param disable_notification
		var frDisableNotification bool
		if o.DisableNotification != nil {
			frDisableNotification = *o.DisableNotification
		}
		fDisableNotification := swag.FormatBool(frDisableNotification)
		if fDisableNotification != "" {
			if err := r.SetFormParam("disable_notification", fDisableNotification); err != nil {
				return err
			}
		}

	}

	if o.Duration != nil {

		// form param duration
		var frDuration int64
		if o.Duration != nil {
			frDuration = *o.Duration
		}
		fDuration := swag.FormatInt64(frDuration)
		if fDuration != "" {
			if err := r.SetFormParam("duration", fDuration); err != nil {
				return err
			}
		}

	}

	if o.Length != nil {

		// form param length
		var frLength int64
		if o.Length != nil {
			frLength = *o.Length
		}
		fLength := swag.FormatInt64(frLength)
		if fLength != "" {
			if err := r.SetFormParam("length", fLength); err != nil {
				return err
			}
		}

	}

	if o.ReplyMarkup != nil {

		// form param reply_markup
		var frReplyMarkup string
		if o.ReplyMarkup != nil {
			frReplyMarkup = *o.ReplyMarkup
		}
		fReplyMarkup := frReplyMarkup
		if fReplyMarkup != "" {
			if err := r.SetFormParam("reply_markup", fReplyMarkup); err != nil {
				return err
			}
		}

	}

	if o.ReplyToMessageID != nil {

		// form param reply_to_message_id
		var frReplyToMessageID int64
		if o.ReplyToMessageID != nil {
			frReplyToMessageID = *o.ReplyToMessageID
		}
		fReplyToMessageID := swag.FormatInt64(frReplyToMessageID)
		if fReplyToMessageID != "" {
			if err := r.SetFormParam("reply_to_message_id", fReplyToMessageID); err != nil {
				return err
			}
		}

	}

	if o.Token != nil {

		// path param token
		if err := r.SetPathParam("token", *o.Token); err != nil {
			return err
		}

	}

	// form file param video_note
	if err := r.SetFileParam("video_note", o.VideoNote); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
