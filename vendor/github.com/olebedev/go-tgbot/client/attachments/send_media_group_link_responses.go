// Code generated by go-swagger; DO NOT EDIT.

package attachments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/olebedev/go-tgbot/models"
)

// SendMediaGroupLinkReader is a Reader for the SendMediaGroupLink structure.
type SendMediaGroupLinkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendMediaGroupLinkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSendMediaGroupLinkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSendMediaGroupLinkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSendMediaGroupLinkUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSendMediaGroupLinkForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSendMediaGroupLinkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 420:
		result := NewSendMediaGroupLinkEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewSendMediaGroupLinkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSendMediaGroupLinkOK creates a SendMediaGroupLinkOK with default headers values
func NewSendMediaGroupLinkOK() *SendMediaGroupLinkOK {
	return &SendMediaGroupLinkOK{}
}

/*SendMediaGroupLinkOK handles this case with default header values.

SendMediaGroupLinkOK send media group link o k
*/
type SendMediaGroupLinkOK struct {
	Payload *models.ResponseMessage
}

func (o *SendMediaGroupLinkOK) Error() string {
	return fmt.Sprintf("[POST /bot{token}/sendMediaGroup#link][%d] sendMediaGroupLinkOK  %+v", 200, o.Payload)
}

func (o *SendMediaGroupLinkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendMediaGroupLinkBadRequest creates a SendMediaGroupLinkBadRequest with default headers values
func NewSendMediaGroupLinkBadRequest() *SendMediaGroupLinkBadRequest {
	return &SendMediaGroupLinkBadRequest{}
}

/*SendMediaGroupLinkBadRequest handles this case with default header values.

Bad Request
*/
type SendMediaGroupLinkBadRequest struct {
	Payload *models.Error
}

func (o *SendMediaGroupLinkBadRequest) Error() string {
	return fmt.Sprintf("[POST /bot{token}/sendMediaGroup#link][%d] sendMediaGroupLinkBadRequest  %+v", 400, o.Payload)
}

func (o *SendMediaGroupLinkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendMediaGroupLinkUnauthorized creates a SendMediaGroupLinkUnauthorized with default headers values
func NewSendMediaGroupLinkUnauthorized() *SendMediaGroupLinkUnauthorized {
	return &SendMediaGroupLinkUnauthorized{}
}

/*SendMediaGroupLinkUnauthorized handles this case with default header values.

Unauthorized
*/
type SendMediaGroupLinkUnauthorized struct {
	Payload *models.Error
}

func (o *SendMediaGroupLinkUnauthorized) Error() string {
	return fmt.Sprintf("[POST /bot{token}/sendMediaGroup#link][%d] sendMediaGroupLinkUnauthorized  %+v", 401, o.Payload)
}

func (o *SendMediaGroupLinkUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendMediaGroupLinkForbidden creates a SendMediaGroupLinkForbidden with default headers values
func NewSendMediaGroupLinkForbidden() *SendMediaGroupLinkForbidden {
	return &SendMediaGroupLinkForbidden{}
}

/*SendMediaGroupLinkForbidden handles this case with default header values.

Forbidden
*/
type SendMediaGroupLinkForbidden struct {
	Payload *models.Error
}

func (o *SendMediaGroupLinkForbidden) Error() string {
	return fmt.Sprintf("[POST /bot{token}/sendMediaGroup#link][%d] sendMediaGroupLinkForbidden  %+v", 403, o.Payload)
}

func (o *SendMediaGroupLinkForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendMediaGroupLinkNotFound creates a SendMediaGroupLinkNotFound with default headers values
func NewSendMediaGroupLinkNotFound() *SendMediaGroupLinkNotFound {
	return &SendMediaGroupLinkNotFound{}
}

/*SendMediaGroupLinkNotFound handles this case with default header values.

Not Found
*/
type SendMediaGroupLinkNotFound struct {
	Payload *models.Error
}

func (o *SendMediaGroupLinkNotFound) Error() string {
	return fmt.Sprintf("[POST /bot{token}/sendMediaGroup#link][%d] sendMediaGroupLinkNotFound  %+v", 404, o.Payload)
}

func (o *SendMediaGroupLinkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendMediaGroupLinkEnhanceYourCalm creates a SendMediaGroupLinkEnhanceYourCalm with default headers values
func NewSendMediaGroupLinkEnhanceYourCalm() *SendMediaGroupLinkEnhanceYourCalm {
	return &SendMediaGroupLinkEnhanceYourCalm{}
}

/*SendMediaGroupLinkEnhanceYourCalm handles this case with default header values.

Flood
*/
type SendMediaGroupLinkEnhanceYourCalm struct {
	Payload *models.Error
}

func (o *SendMediaGroupLinkEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[POST /bot{token}/sendMediaGroup#link][%d] sendMediaGroupLinkEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *SendMediaGroupLinkEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendMediaGroupLinkInternalServerError creates a SendMediaGroupLinkInternalServerError with default headers values
func NewSendMediaGroupLinkInternalServerError() *SendMediaGroupLinkInternalServerError {
	return &SendMediaGroupLinkInternalServerError{}
}

/*SendMediaGroupLinkInternalServerError handles this case with default header values.

Internal
*/
type SendMediaGroupLinkInternalServerError struct {
	Payload *models.Error
}

func (o *SendMediaGroupLinkInternalServerError) Error() string {
	return fmt.Sprintf("[POST /bot{token}/sendMediaGroup#link][%d] sendMediaGroupLinkInternalServerError  %+v", 500, o.Payload)
}

func (o *SendMediaGroupLinkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
