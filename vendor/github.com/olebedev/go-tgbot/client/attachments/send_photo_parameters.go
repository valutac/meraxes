// Code generated by go-swagger; DO NOT EDIT.

package attachments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSendPhotoParams creates a new SendPhotoParams object
// with the default values initialized.
func NewSendPhotoParams() *SendPhotoParams {
	var ()
	return &SendPhotoParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSendPhotoParamsWithTimeout creates a new SendPhotoParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSendPhotoParamsWithTimeout(timeout time.Duration) *SendPhotoParams {
	var ()
	return &SendPhotoParams{

		timeout: timeout,
	}
}

// NewSendPhotoParamsWithContext creates a new SendPhotoParams object
// with the default values initialized, and the ability to set a context for a request
func NewSendPhotoParamsWithContext(ctx context.Context) *SendPhotoParams {
	var ()
	return &SendPhotoParams{

		Context: ctx,
	}
}

// NewSendPhotoParamsWithHTTPClient creates a new SendPhotoParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSendPhotoParamsWithHTTPClient(client *http.Client) *SendPhotoParams {
	var ()
	return &SendPhotoParams{
		HTTPClient: client,
	}
}

/*SendPhotoParams contains all the parameters to send to the API endpoint
for the send photo operation typically these are written to a http.Request
*/
type SendPhotoParams struct {

	/*Caption*/
	Caption *string
	/*ChatID*/
	ChatID string
	/*DisableNotification*/
	DisableNotification *bool
	/*ParseMode*/
	ParseMode *string
	/*Photo*/
	Photo runtime.NamedReadCloser
	/*ReplyMarkup
	  json string of reply_markup object

	*/
	ReplyMarkup *string
	/*ReplyToMessageID*/
	ReplyToMessageID *int64
	/*Token
	  bot's token to authorize the request

	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the send photo params
func (o *SendPhotoParams) WithTimeout(timeout time.Duration) *SendPhotoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the send photo params
func (o *SendPhotoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the send photo params
func (o *SendPhotoParams) WithContext(ctx context.Context) *SendPhotoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the send photo params
func (o *SendPhotoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the send photo params
func (o *SendPhotoParams) WithHTTPClient(client *http.Client) *SendPhotoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the send photo params
func (o *SendPhotoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCaption adds the caption to the send photo params
func (o *SendPhotoParams) WithCaption(caption *string) *SendPhotoParams {
	o.SetCaption(caption)
	return o
}

// SetCaption adds the caption to the send photo params
func (o *SendPhotoParams) SetCaption(caption *string) {
	o.Caption = caption
}

// WithChatID adds the chatID to the send photo params
func (o *SendPhotoParams) WithChatID(chatID string) *SendPhotoParams {
	o.SetChatID(chatID)
	return o
}

// SetChatID adds the chatId to the send photo params
func (o *SendPhotoParams) SetChatID(chatID string) {
	o.ChatID = chatID
}

// WithDisableNotification adds the disableNotification to the send photo params
func (o *SendPhotoParams) WithDisableNotification(disableNotification *bool) *SendPhotoParams {
	o.SetDisableNotification(disableNotification)
	return o
}

// SetDisableNotification adds the disableNotification to the send photo params
func (o *SendPhotoParams) SetDisableNotification(disableNotification *bool) {
	o.DisableNotification = disableNotification
}

// WithParseMode adds the parseMode to the send photo params
func (o *SendPhotoParams) WithParseMode(parseMode *string) *SendPhotoParams {
	o.SetParseMode(parseMode)
	return o
}

// SetParseMode adds the parseMode to the send photo params
func (o *SendPhotoParams) SetParseMode(parseMode *string) {
	o.ParseMode = parseMode
}

// WithPhoto adds the photo to the send photo params
func (o *SendPhotoParams) WithPhoto(photo runtime.NamedReadCloser) *SendPhotoParams {
	o.SetPhoto(photo)
	return o
}

// SetPhoto adds the photo to the send photo params
func (o *SendPhotoParams) SetPhoto(photo runtime.NamedReadCloser) {
	o.Photo = photo
}

// WithReplyMarkup adds the replyMarkup to the send photo params
func (o *SendPhotoParams) WithReplyMarkup(replyMarkup *string) *SendPhotoParams {
	o.SetReplyMarkup(replyMarkup)
	return o
}

// SetReplyMarkup adds the replyMarkup to the send photo params
func (o *SendPhotoParams) SetReplyMarkup(replyMarkup *string) {
	o.ReplyMarkup = replyMarkup
}

// WithReplyToMessageID adds the replyToMessageID to the send photo params
func (o *SendPhotoParams) WithReplyToMessageID(replyToMessageID *int64) *SendPhotoParams {
	o.SetReplyToMessageID(replyToMessageID)
	return o
}

// SetReplyToMessageID adds the replyToMessageId to the send photo params
func (o *SendPhotoParams) SetReplyToMessageID(replyToMessageID *int64) {
	o.ReplyToMessageID = replyToMessageID
}

// WithToken adds the token to the send photo params
func (o *SendPhotoParams) WithToken(token *string) *SendPhotoParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the send photo params
func (o *SendPhotoParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *SendPhotoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Caption != nil {

		// form param caption
		var frCaption string
		if o.Caption != nil {
			frCaption = *o.Caption
		}
		fCaption := frCaption
		if fCaption != "" {
			if err := r.SetFormParam("caption", fCaption); err != nil {
				return err
			}
		}

	}

	// form param chat_id
	frChatID := o.ChatID
	fChatID := frChatID
	if fChatID != "" {
		if err := r.SetFormParam("chat_id", fChatID); err != nil {
			return err
		}
	}

	if o.DisableNotification != nil {

		// form param disable_notification
		var frDisableNotification bool
		if o.DisableNotification != nil {
			frDisableNotification = *o.DisableNotification
		}
		fDisableNotification := swag.FormatBool(frDisableNotification)
		if fDisableNotification != "" {
			if err := r.SetFormParam("disable_notification", fDisableNotification); err != nil {
				return err
			}
		}

	}

	if o.ParseMode != nil {

		// form param parse_mode
		var frParseMode string
		if o.ParseMode != nil {
			frParseMode = *o.ParseMode
		}
		fParseMode := frParseMode
		if fParseMode != "" {
			if err := r.SetFormParam("parse_mode", fParseMode); err != nil {
				return err
			}
		}

	}

	// form file param photo
	if err := r.SetFileParam("photo", o.Photo); err != nil {
		return err
	}

	if o.ReplyMarkup != nil {

		// form param reply_markup
		var frReplyMarkup string
		if o.ReplyMarkup != nil {
			frReplyMarkup = *o.ReplyMarkup
		}
		fReplyMarkup := frReplyMarkup
		if fReplyMarkup != "" {
			if err := r.SetFormParam("reply_markup", fReplyMarkup); err != nil {
				return err
			}
		}

	}

	if o.ReplyToMessageID != nil {

		// form param reply_to_message_id
		var frReplyToMessageID int64
		if o.ReplyToMessageID != nil {
			frReplyToMessageID = *o.ReplyToMessageID
		}
		fReplyToMessageID := swag.FormatInt64(frReplyToMessageID)
		if fReplyToMessageID != "" {
			if err := r.SetFormParam("reply_to_message_id", fReplyToMessageID); err != nil {
				return err
			}
		}

	}

	if o.Token != nil {

		// path param token
		if err := r.SetPathParam("token", *o.Token); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
