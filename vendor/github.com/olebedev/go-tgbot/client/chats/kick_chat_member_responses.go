// Code generated by go-swagger; DO NOT EDIT.

package chats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/olebedev/go-tgbot/models"
)

// KickChatMemberReader is a Reader for the KickChatMember structure.
type KickChatMemberReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KickChatMemberReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewKickChatMemberOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewKickChatMemberBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewKickChatMemberUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewKickChatMemberForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewKickChatMemberNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 420:
		result := NewKickChatMemberEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewKickChatMemberInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewKickChatMemberOK creates a KickChatMemberOK with default headers values
func NewKickChatMemberOK() *KickChatMemberOK {
	return &KickChatMemberOK{}
}

/*KickChatMemberOK handles this case with default header values.

KickChatMemberOK kick chat member o k
*/
type KickChatMemberOK struct {
	Payload *models.ResponseBool
}

func (o *KickChatMemberOK) Error() string {
	return fmt.Sprintf("[GET /bot{token}/kickChatMember][%d] kickChatMemberOK  %+v", 200, o.Payload)
}

func (o *KickChatMemberOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseBool)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKickChatMemberBadRequest creates a KickChatMemberBadRequest with default headers values
func NewKickChatMemberBadRequest() *KickChatMemberBadRequest {
	return &KickChatMemberBadRequest{}
}

/*KickChatMemberBadRequest handles this case with default header values.

Bad Request
*/
type KickChatMemberBadRequest struct {
	Payload *models.Error
}

func (o *KickChatMemberBadRequest) Error() string {
	return fmt.Sprintf("[GET /bot{token}/kickChatMember][%d] kickChatMemberBadRequest  %+v", 400, o.Payload)
}

func (o *KickChatMemberBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKickChatMemberUnauthorized creates a KickChatMemberUnauthorized with default headers values
func NewKickChatMemberUnauthorized() *KickChatMemberUnauthorized {
	return &KickChatMemberUnauthorized{}
}

/*KickChatMemberUnauthorized handles this case with default header values.

Unauthorized
*/
type KickChatMemberUnauthorized struct {
	Payload *models.Error
}

func (o *KickChatMemberUnauthorized) Error() string {
	return fmt.Sprintf("[GET /bot{token}/kickChatMember][%d] kickChatMemberUnauthorized  %+v", 401, o.Payload)
}

func (o *KickChatMemberUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKickChatMemberForbidden creates a KickChatMemberForbidden with default headers values
func NewKickChatMemberForbidden() *KickChatMemberForbidden {
	return &KickChatMemberForbidden{}
}

/*KickChatMemberForbidden handles this case with default header values.

Forbidden
*/
type KickChatMemberForbidden struct {
	Payload *models.Error
}

func (o *KickChatMemberForbidden) Error() string {
	return fmt.Sprintf("[GET /bot{token}/kickChatMember][%d] kickChatMemberForbidden  %+v", 403, o.Payload)
}

func (o *KickChatMemberForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKickChatMemberNotFound creates a KickChatMemberNotFound with default headers values
func NewKickChatMemberNotFound() *KickChatMemberNotFound {
	return &KickChatMemberNotFound{}
}

/*KickChatMemberNotFound handles this case with default header values.

Not Found
*/
type KickChatMemberNotFound struct {
	Payload *models.Error
}

func (o *KickChatMemberNotFound) Error() string {
	return fmt.Sprintf("[GET /bot{token}/kickChatMember][%d] kickChatMemberNotFound  %+v", 404, o.Payload)
}

func (o *KickChatMemberNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKickChatMemberEnhanceYourCalm creates a KickChatMemberEnhanceYourCalm with default headers values
func NewKickChatMemberEnhanceYourCalm() *KickChatMemberEnhanceYourCalm {
	return &KickChatMemberEnhanceYourCalm{}
}

/*KickChatMemberEnhanceYourCalm handles this case with default header values.

Flood
*/
type KickChatMemberEnhanceYourCalm struct {
	Payload *models.Error
}

func (o *KickChatMemberEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /bot{token}/kickChatMember][%d] kickChatMemberEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *KickChatMemberEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKickChatMemberInternalServerError creates a KickChatMemberInternalServerError with default headers values
func NewKickChatMemberInternalServerError() *KickChatMemberInternalServerError {
	return &KickChatMemberInternalServerError{}
}

/*KickChatMemberInternalServerError handles this case with default header values.

Internal
*/
type KickChatMemberInternalServerError struct {
	Payload *models.Error
}

func (o *KickChatMemberInternalServerError) Error() string {
	return fmt.Sprintf("[GET /bot{token}/kickChatMember][%d] kickChatMemberInternalServerError  %+v", 500, o.Payload)
}

func (o *KickChatMemberInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
