// Code generated by go-swagger; DO NOT EDIT.

package updates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSetWebhookParams creates a new SetWebhookParams object
// with the default values initialized.
func NewSetWebhookParams() *SetWebhookParams {
	var ()
	return &SetWebhookParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetWebhookParamsWithTimeout creates a new SetWebhookParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetWebhookParamsWithTimeout(timeout time.Duration) *SetWebhookParams {
	var ()
	return &SetWebhookParams{

		timeout: timeout,
	}
}

// NewSetWebhookParamsWithContext creates a new SetWebhookParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetWebhookParamsWithContext(ctx context.Context) *SetWebhookParams {
	var ()
	return &SetWebhookParams{

		Context: ctx,
	}
}

// NewSetWebhookParamsWithHTTPClient creates a new SetWebhookParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetWebhookParamsWithHTTPClient(client *http.Client) *SetWebhookParams {
	var ()
	return &SetWebhookParams{
		HTTPClient: client,
	}
}

/*SetWebhookParams contains all the parameters to send to the API endpoint
for the set webhook operation typically these are written to a http.Request
*/
type SetWebhookParams struct {

	/*AllowedUpdates*/
	AllowedUpdates []string
	/*Certificate*/
	Certificate runtime.NamedReadCloser
	/*MaxConnections*/
	MaxConnections *int64
	/*Token
	  bot's token to authorize the request

	*/
	Token *string
	/*URL*/
	URL string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set webhook params
func (o *SetWebhookParams) WithTimeout(timeout time.Duration) *SetWebhookParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set webhook params
func (o *SetWebhookParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set webhook params
func (o *SetWebhookParams) WithContext(ctx context.Context) *SetWebhookParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set webhook params
func (o *SetWebhookParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set webhook params
func (o *SetWebhookParams) WithHTTPClient(client *http.Client) *SetWebhookParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set webhook params
func (o *SetWebhookParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowedUpdates adds the allowedUpdates to the set webhook params
func (o *SetWebhookParams) WithAllowedUpdates(allowedUpdates []string) *SetWebhookParams {
	o.SetAllowedUpdates(allowedUpdates)
	return o
}

// SetAllowedUpdates adds the allowedUpdates to the set webhook params
func (o *SetWebhookParams) SetAllowedUpdates(allowedUpdates []string) {
	o.AllowedUpdates = allowedUpdates
}

// WithCertificate adds the certificate to the set webhook params
func (o *SetWebhookParams) WithCertificate(certificate runtime.NamedReadCloser) *SetWebhookParams {
	o.SetCertificate(certificate)
	return o
}

// SetCertificate adds the certificate to the set webhook params
func (o *SetWebhookParams) SetCertificate(certificate runtime.NamedReadCloser) {
	o.Certificate = certificate
}

// WithMaxConnections adds the maxConnections to the set webhook params
func (o *SetWebhookParams) WithMaxConnections(maxConnections *int64) *SetWebhookParams {
	o.SetMaxConnections(maxConnections)
	return o
}

// SetMaxConnections adds the maxConnections to the set webhook params
func (o *SetWebhookParams) SetMaxConnections(maxConnections *int64) {
	o.MaxConnections = maxConnections
}

// WithToken adds the token to the set webhook params
func (o *SetWebhookParams) WithToken(token *string) *SetWebhookParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the set webhook params
func (o *SetWebhookParams) SetToken(token *string) {
	o.Token = token
}

// WithURL adds the url to the set webhook params
func (o *SetWebhookParams) WithURL(url string) *SetWebhookParams {
	o.SetURL(url)
	return o
}

// SetURL adds the url to the set webhook params
func (o *SetWebhookParams) SetURL(url string) {
	o.URL = url
}

// WriteToRequest writes these params to a swagger request
func (o *SetWebhookParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesAllowedUpdates := o.AllowedUpdates

	joinedAllowedUpdates := swag.JoinByFormat(valuesAllowedUpdates, "multi")
	// form array param allowed_updates
	if err := r.SetFormParam("allowed_updates", joinedAllowedUpdates...); err != nil {
		return err
	}

	if o.Certificate != nil {

		if o.Certificate != nil {

			// form file param certificate
			if err := r.SetFileParam("certificate", o.Certificate); err != nil {
				return err
			}

		}

	}

	if o.MaxConnections != nil {

		// form param max_connections
		var frMaxConnections int64
		if o.MaxConnections != nil {
			frMaxConnections = *o.MaxConnections
		}
		fMaxConnections := swag.FormatInt64(frMaxConnections)
		if fMaxConnections != "" {
			if err := r.SetFormParam("max_connections", fMaxConnections); err != nil {
				return err
			}
		}

	}

	if o.Token != nil {

		// path param token
		if err := r.SetPathParam("token", *o.Token); err != nil {
			return err
		}

	}

	// form param url
	frURL := o.URL
	fURL := frURL
	if fURL != "" {
		if err := r.SetFormParam("url", fURL); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
