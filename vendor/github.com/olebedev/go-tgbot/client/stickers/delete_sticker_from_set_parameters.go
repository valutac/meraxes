// Code generated by go-swagger; DO NOT EDIT.

package stickers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteStickerFromSetParams creates a new DeleteStickerFromSetParams object
// with the default values initialized.
func NewDeleteStickerFromSetParams() *DeleteStickerFromSetParams {
	var ()
	return &DeleteStickerFromSetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteStickerFromSetParamsWithTimeout creates a new DeleteStickerFromSetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteStickerFromSetParamsWithTimeout(timeout time.Duration) *DeleteStickerFromSetParams {
	var ()
	return &DeleteStickerFromSetParams{

		timeout: timeout,
	}
}

// NewDeleteStickerFromSetParamsWithContext creates a new DeleteStickerFromSetParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteStickerFromSetParamsWithContext(ctx context.Context) *DeleteStickerFromSetParams {
	var ()
	return &DeleteStickerFromSetParams{

		Context: ctx,
	}
}

// NewDeleteStickerFromSetParamsWithHTTPClient creates a new DeleteStickerFromSetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteStickerFromSetParamsWithHTTPClient(client *http.Client) *DeleteStickerFromSetParams {
	var ()
	return &DeleteStickerFromSetParams{
		HTTPClient: client,
	}
}

/*DeleteStickerFromSetParams contains all the parameters to send to the API endpoint
for the delete sticker from set operation typically these are written to a http.Request
*/
type DeleteStickerFromSetParams struct {

	/*Sticker*/
	Sticker string
	/*Token
	  bot's token to authorize the request

	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete sticker from set params
func (o *DeleteStickerFromSetParams) WithTimeout(timeout time.Duration) *DeleteStickerFromSetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete sticker from set params
func (o *DeleteStickerFromSetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete sticker from set params
func (o *DeleteStickerFromSetParams) WithContext(ctx context.Context) *DeleteStickerFromSetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete sticker from set params
func (o *DeleteStickerFromSetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete sticker from set params
func (o *DeleteStickerFromSetParams) WithHTTPClient(client *http.Client) *DeleteStickerFromSetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete sticker from set params
func (o *DeleteStickerFromSetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSticker adds the sticker to the delete sticker from set params
func (o *DeleteStickerFromSetParams) WithSticker(sticker string) *DeleteStickerFromSetParams {
	o.SetSticker(sticker)
	return o
}

// SetSticker adds the sticker to the delete sticker from set params
func (o *DeleteStickerFromSetParams) SetSticker(sticker string) {
	o.Sticker = sticker
}

// WithToken adds the token to the delete sticker from set params
func (o *DeleteStickerFromSetParams) WithToken(token *string) *DeleteStickerFromSetParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the delete sticker from set params
func (o *DeleteStickerFromSetParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteStickerFromSetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param sticker
	frSticker := o.Sticker
	fSticker := frSticker
	if fSticker != "" {
		if err := r.SetFormParam("sticker", fSticker); err != nil {
			return err
		}
	}

	if o.Token != nil {

		// path param token
		if err := r.SetPathParam("token", *o.Token); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
