// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PreCheckoutQuery pre checkout query
// swagger:model PreCheckoutQuery
type PreCheckoutQuery struct {

	// currency
	Currency string `json:"currency,omitempty"`

	// from
	From *User `json:"from,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// invoice payload
	InvoicePayload string `json:"invoice_payload,omitempty"`

	// order info
	OrderInfo *OrderInfo `json:"order_info,omitempty"`

	// shipping option id
	ShippingOptionID string `json:"shipping_option_id,omitempty"`

	// total amount
	TotalAmount int64 `json:"total_amount,omitempty"`
}

// Validate validates this pre checkout query
func (m *PreCheckoutQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrom(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrderInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PreCheckoutQuery) validateFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.From) { // not required
		return nil
	}

	if m.From != nil {

		if err := m.From.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *PreCheckoutQuery) validateOrderInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.OrderInfo) { // not required
		return nil
	}

	if m.OrderInfo != nil {

		if err := m.OrderInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("order_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PreCheckoutQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PreCheckoutQuery) UnmarshalBinary(b []byte) error {
	var res PreCheckoutQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
