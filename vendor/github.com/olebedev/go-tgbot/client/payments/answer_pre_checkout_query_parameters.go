// Code generated by go-swagger; DO NOT EDIT.

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAnswerPreCheckoutQueryParams creates a new AnswerPreCheckoutQueryParams object
// with the default values initialized.
func NewAnswerPreCheckoutQueryParams() *AnswerPreCheckoutQueryParams {
	var ()
	return &AnswerPreCheckoutQueryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAnswerPreCheckoutQueryParamsWithTimeout creates a new AnswerPreCheckoutQueryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAnswerPreCheckoutQueryParamsWithTimeout(timeout time.Duration) *AnswerPreCheckoutQueryParams {
	var ()
	return &AnswerPreCheckoutQueryParams{

		timeout: timeout,
	}
}

// NewAnswerPreCheckoutQueryParamsWithContext creates a new AnswerPreCheckoutQueryParams object
// with the default values initialized, and the ability to set a context for a request
func NewAnswerPreCheckoutQueryParamsWithContext(ctx context.Context) *AnswerPreCheckoutQueryParams {
	var ()
	return &AnswerPreCheckoutQueryParams{

		Context: ctx,
	}
}

// NewAnswerPreCheckoutQueryParamsWithHTTPClient creates a new AnswerPreCheckoutQueryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAnswerPreCheckoutQueryParamsWithHTTPClient(client *http.Client) *AnswerPreCheckoutQueryParams {
	var ()
	return &AnswerPreCheckoutQueryParams{
		HTTPClient: client,
	}
}

/*AnswerPreCheckoutQueryParams contains all the parameters to send to the API endpoint
for the answer pre checkout query operation typically these are written to a http.Request
*/
type AnswerPreCheckoutQueryParams struct {

	/*ErrorMessage*/
	ErrorMessage *string
	/*Ok*/
	Ok bool
	/*PreCheckoutQueryID*/
	PreCheckoutQueryID string
	/*Token
	  bot's token to authorize the request

	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the answer pre checkout query params
func (o *AnswerPreCheckoutQueryParams) WithTimeout(timeout time.Duration) *AnswerPreCheckoutQueryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the answer pre checkout query params
func (o *AnswerPreCheckoutQueryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the answer pre checkout query params
func (o *AnswerPreCheckoutQueryParams) WithContext(ctx context.Context) *AnswerPreCheckoutQueryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the answer pre checkout query params
func (o *AnswerPreCheckoutQueryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the answer pre checkout query params
func (o *AnswerPreCheckoutQueryParams) WithHTTPClient(client *http.Client) *AnswerPreCheckoutQueryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the answer pre checkout query params
func (o *AnswerPreCheckoutQueryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithErrorMessage adds the errorMessage to the answer pre checkout query params
func (o *AnswerPreCheckoutQueryParams) WithErrorMessage(errorMessage *string) *AnswerPreCheckoutQueryParams {
	o.SetErrorMessage(errorMessage)
	return o
}

// SetErrorMessage adds the errorMessage to the answer pre checkout query params
func (o *AnswerPreCheckoutQueryParams) SetErrorMessage(errorMessage *string) {
	o.ErrorMessage = errorMessage
}

// WithOk adds the ok to the answer pre checkout query params
func (o *AnswerPreCheckoutQueryParams) WithOk(ok bool) *AnswerPreCheckoutQueryParams {
	o.SetOk(ok)
	return o
}

// SetOk adds the ok to the answer pre checkout query params
func (o *AnswerPreCheckoutQueryParams) SetOk(ok bool) {
	o.Ok = ok
}

// WithPreCheckoutQueryID adds the preCheckoutQueryID to the answer pre checkout query params
func (o *AnswerPreCheckoutQueryParams) WithPreCheckoutQueryID(preCheckoutQueryID string) *AnswerPreCheckoutQueryParams {
	o.SetPreCheckoutQueryID(preCheckoutQueryID)
	return o
}

// SetPreCheckoutQueryID adds the preCheckoutQueryId to the answer pre checkout query params
func (o *AnswerPreCheckoutQueryParams) SetPreCheckoutQueryID(preCheckoutQueryID string) {
	o.PreCheckoutQueryID = preCheckoutQueryID
}

// WithToken adds the token to the answer pre checkout query params
func (o *AnswerPreCheckoutQueryParams) WithToken(token *string) *AnswerPreCheckoutQueryParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the answer pre checkout query params
func (o *AnswerPreCheckoutQueryParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *AnswerPreCheckoutQueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ErrorMessage != nil {

		// query param error_message
		var qrErrorMessage string
		if o.ErrorMessage != nil {
			qrErrorMessage = *o.ErrorMessage
		}
		qErrorMessage := qrErrorMessage
		if qErrorMessage != "" {
			if err := r.SetQueryParam("error_message", qErrorMessage); err != nil {
				return err
			}
		}

	}

	// query param ok
	qrOk := o.Ok
	qOk := swag.FormatBool(qrOk)
	if qOk != "" {
		if err := r.SetQueryParam("ok", qOk); err != nil {
			return err
		}
	}

	// query param pre_checkout_query_id
	qrPreCheckoutQueryID := o.PreCheckoutQueryID
	qPreCheckoutQueryID := qrPreCheckoutQueryID
	if qPreCheckoutQueryID != "" {
		if err := r.SetQueryParam("pre_checkout_query_id", qPreCheckoutQueryID); err != nil {
			return err
		}
	}

	if o.Token != nil {

		// path param token
		if err := r.SetPathParam("token", *o.Token); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
