// Code generated by go-swagger; DO NOT EDIT.

package updates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new updates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for updates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteWebhook delete webhook API
*/
func (a *Client) DeleteWebhook(params *DeleteWebhookParams) (*DeleteWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWebhookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWebhook",
		Method:             "GET",
		PathPattern:        "/bot{token}/deleteWebhook",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWebhookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWebhookOK), nil

}

/*
GetUpdates get updates API
*/
func (a *Client) GetUpdates(params *GetUpdatesParams) (*GetUpdatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUpdatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUpdates",
		Method:             "POST",
		PathPattern:        "/bot{token}/getUpdates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUpdatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUpdatesOK), nil

}

/*
GetWebhookInfo get webhook info API
*/
func (a *Client) GetWebhookInfo(params *GetWebhookInfoParams) (*GetWebhookInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebhookInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebhookInfo",
		Method:             "GET",
		PathPattern:        "/bot{token}/getWebhookInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebhookInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebhookInfoOK), nil

}

/*
SetWebhook set webhook API
*/
func (a *Client) SetWebhook(params *SetWebhookParams) (*SetWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetWebhookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setWebhook",
		Method:             "POST",
		PathPattern:        "/bot{token}/setWebhook",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetWebhookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetWebhookOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
