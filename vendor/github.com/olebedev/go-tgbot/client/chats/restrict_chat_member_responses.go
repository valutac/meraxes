// Code generated by go-swagger; DO NOT EDIT.

package chats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/olebedev/go-tgbot/models"
)

// RestrictChatMemberReader is a Reader for the RestrictChatMember structure.
type RestrictChatMemberReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RestrictChatMemberReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRestrictChatMemberOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewRestrictChatMemberBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewRestrictChatMemberUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewRestrictChatMemberForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewRestrictChatMemberNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 420:
		result := NewRestrictChatMemberEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewRestrictChatMemberInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRestrictChatMemberOK creates a RestrictChatMemberOK with default headers values
func NewRestrictChatMemberOK() *RestrictChatMemberOK {
	return &RestrictChatMemberOK{}
}

/*RestrictChatMemberOK handles this case with default header values.

RestrictChatMemberOK restrict chat member o k
*/
type RestrictChatMemberOK struct {
	Payload *models.ResponseBool
}

func (o *RestrictChatMemberOK) Error() string {
	return fmt.Sprintf("[POST /bot{token}/restrictChatMember][%d] restrictChatMemberOK  %+v", 200, o.Payload)
}

func (o *RestrictChatMemberOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseBool)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestrictChatMemberBadRequest creates a RestrictChatMemberBadRequest with default headers values
func NewRestrictChatMemberBadRequest() *RestrictChatMemberBadRequest {
	return &RestrictChatMemberBadRequest{}
}

/*RestrictChatMemberBadRequest handles this case with default header values.

Bad Request
*/
type RestrictChatMemberBadRequest struct {
	Payload *models.Error
}

func (o *RestrictChatMemberBadRequest) Error() string {
	return fmt.Sprintf("[POST /bot{token}/restrictChatMember][%d] restrictChatMemberBadRequest  %+v", 400, o.Payload)
}

func (o *RestrictChatMemberBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestrictChatMemberUnauthorized creates a RestrictChatMemberUnauthorized with default headers values
func NewRestrictChatMemberUnauthorized() *RestrictChatMemberUnauthorized {
	return &RestrictChatMemberUnauthorized{}
}

/*RestrictChatMemberUnauthorized handles this case with default header values.

Unauthorized
*/
type RestrictChatMemberUnauthorized struct {
	Payload *models.Error
}

func (o *RestrictChatMemberUnauthorized) Error() string {
	return fmt.Sprintf("[POST /bot{token}/restrictChatMember][%d] restrictChatMemberUnauthorized  %+v", 401, o.Payload)
}

func (o *RestrictChatMemberUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestrictChatMemberForbidden creates a RestrictChatMemberForbidden with default headers values
func NewRestrictChatMemberForbidden() *RestrictChatMemberForbidden {
	return &RestrictChatMemberForbidden{}
}

/*RestrictChatMemberForbidden handles this case with default header values.

Forbidden
*/
type RestrictChatMemberForbidden struct {
	Payload *models.Error
}

func (o *RestrictChatMemberForbidden) Error() string {
	return fmt.Sprintf("[POST /bot{token}/restrictChatMember][%d] restrictChatMemberForbidden  %+v", 403, o.Payload)
}

func (o *RestrictChatMemberForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestrictChatMemberNotFound creates a RestrictChatMemberNotFound with default headers values
func NewRestrictChatMemberNotFound() *RestrictChatMemberNotFound {
	return &RestrictChatMemberNotFound{}
}

/*RestrictChatMemberNotFound handles this case with default header values.

Not Found
*/
type RestrictChatMemberNotFound struct {
	Payload *models.Error
}

func (o *RestrictChatMemberNotFound) Error() string {
	return fmt.Sprintf("[POST /bot{token}/restrictChatMember][%d] restrictChatMemberNotFound  %+v", 404, o.Payload)
}

func (o *RestrictChatMemberNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestrictChatMemberEnhanceYourCalm creates a RestrictChatMemberEnhanceYourCalm with default headers values
func NewRestrictChatMemberEnhanceYourCalm() *RestrictChatMemberEnhanceYourCalm {
	return &RestrictChatMemberEnhanceYourCalm{}
}

/*RestrictChatMemberEnhanceYourCalm handles this case with default header values.

Flood
*/
type RestrictChatMemberEnhanceYourCalm struct {
	Payload *models.Error
}

func (o *RestrictChatMemberEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[POST /bot{token}/restrictChatMember][%d] restrictChatMemberEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *RestrictChatMemberEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestrictChatMemberInternalServerError creates a RestrictChatMemberInternalServerError with default headers values
func NewRestrictChatMemberInternalServerError() *RestrictChatMemberInternalServerError {
	return &RestrictChatMemberInternalServerError{}
}

/*RestrictChatMemberInternalServerError handles this case with default header values.

Internal
*/
type RestrictChatMemberInternalServerError struct {
	Payload *models.Error
}

func (o *RestrictChatMemberInternalServerError) Error() string {
	return fmt.Sprintf("[POST /bot{token}/restrictChatMember][%d] restrictChatMemberInternalServerError  %+v", 500, o.Payload)
}

func (o *RestrictChatMemberInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
