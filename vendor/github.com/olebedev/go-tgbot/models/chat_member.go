// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChatMember chat member
// swagger:model ChatMember
type ChatMember struct {

	// can add web page previews
	CanAddWebPagePreviews bool `json:"can_add_web_page_previews,omitempty"`

	// can be edited
	CanBeEdited bool `json:"can_be_edited,omitempty"`

	// can change info
	CanChangeInfo bool `json:"can_change_info,omitempty"`

	// can delete messages
	CanDeleteMessages bool `json:"can_delete_messages,omitempty"`

	// can edit messages
	CanEditMessages bool `json:"can_edit_messages,omitempty"`

	// can invite users
	CanInviteUsers bool `json:"can_invite_users,omitempty"`

	// can pin messages
	CanPinMessages bool `json:"can_pin_messages,omitempty"`

	// can post messages
	CanPostMessages bool `json:"can_post_messages,omitempty"`

	// can promote members
	CanPromoteMembers bool `json:"can_promote_members,omitempty"`

	// can restrict members
	CanRestrictMembers bool `json:"can_restrict_members,omitempty"`

	// can send media messages
	CanSendMediaMessages bool `json:"can_send_media_messages,omitempty"`

	// can send messages
	CanSendMessages bool `json:"can_send_messages,omitempty"`

	// can send other messages
	CanSendOtherMessages bool `json:"can_send_other_messages,omitempty"`

	// status
	// Required: true
	Status *string `json:"status"`

	// until date
	UntilDate int64 `json:"until_date,omitempty"`

	// user
	// Required: true
	User *User `json:"user"`
}

// Validate validates this chat member
func (m *ChatMember) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var chatMemberTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["creator","administrator","member","restricted","left","kicked"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chatMemberTypeStatusPropEnum = append(chatMemberTypeStatusPropEnum, v)
	}
}

const (
	// ChatMemberStatusCreator captures enum value "creator"
	ChatMemberStatusCreator string = "creator"
	// ChatMemberStatusAdministrator captures enum value "administrator"
	ChatMemberStatusAdministrator string = "administrator"
	// ChatMemberStatusMember captures enum value "member"
	ChatMemberStatusMember string = "member"
	// ChatMemberStatusRestricted captures enum value "restricted"
	ChatMemberStatusRestricted string = "restricted"
	// ChatMemberStatusLeft captures enum value "left"
	ChatMemberStatusLeft string = "left"
	// ChatMemberStatusKicked captures enum value "kicked"
	ChatMemberStatusKicked string = "kicked"
)

// prop value enum
func (m *ChatMember) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, chatMemberTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ChatMember) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ChatMember) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {

		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChatMember) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChatMember) UnmarshalBinary(b []byte) error {
	var res ChatMember
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
