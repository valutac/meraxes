// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// InlineType inline type
// swagger:model InlineType
type InlineType string

const (
	// InlineTypeArticle captures enum value "article"
	InlineTypeArticle InlineType = "article"
	// InlineTypeAudio captures enum value "audio"
	InlineTypeAudio InlineType = "audio"
	// InlineTypeContact captures enum value "contact"
	InlineTypeContact InlineType = "contact"
	// InlineTypeGame captures enum value "game"
	InlineTypeGame InlineType = "game"
	// InlineTypeDocument captures enum value "document"
	InlineTypeDocument InlineType = "document"
	// InlineTypeGif captures enum value "gif"
	InlineTypeGif InlineType = "gif"
	// InlineTypeLocation captures enum value "location"
	InlineTypeLocation InlineType = "location"
	// InlineTypeMpeg4Gif captures enum value "mpeg4_gif"
	InlineTypeMpeg4Gif InlineType = "mpeg4_gif"
	// InlineTypePhoto captures enum value "photo"
	InlineTypePhoto InlineType = "photo"
	// InlineTypeVenue captures enum value "venue"
	InlineTypeVenue InlineType = "venue"
	// InlineTypeVideo captures enum value "video"
	InlineTypeVideo InlineType = "video"
	// InlineTypeVoice captures enum value "voice"
	InlineTypeVoice InlineType = "voice"
	// InlineTypeSticker captures enum value "sticker"
	InlineTypeSticker InlineType = "sticker"
)

// for schema
var inlineTypeEnum []interface{}

func init() {
	var res []InlineType
	if err := json.Unmarshal([]byte(`["article","audio","contact","game","document","gif","location","mpeg4_gif","photo","venue","video","voice","sticker"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inlineTypeEnum = append(inlineTypeEnum, v)
	}
}

func (m InlineType) validateInlineTypeEnum(path, location string, value InlineType) error {
	if err := validate.Enum(path, location, value, inlineTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this inline type
func (m InlineType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInlineTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
