// Code generated by go-swagger; DO NOT EDIT.

package chats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/olebedev/go-tgbot/models"
)

// SetChatDescriptionReader is a Reader for the SetChatDescription structure.
type SetChatDescriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetChatDescriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSetChatDescriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSetChatDescriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSetChatDescriptionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSetChatDescriptionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSetChatDescriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 420:
		result := NewSetChatDescriptionEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewSetChatDescriptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetChatDescriptionOK creates a SetChatDescriptionOK with default headers values
func NewSetChatDescriptionOK() *SetChatDescriptionOK {
	return &SetChatDescriptionOK{}
}

/*SetChatDescriptionOK handles this case with default header values.

SetChatDescriptionOK set chat description o k
*/
type SetChatDescriptionOK struct {
	Payload *models.ResponseBool
}

func (o *SetChatDescriptionOK) Error() string {
	return fmt.Sprintf("[POST /bot{token}/setChatDescription][%d] setChatDescriptionOK  %+v", 200, o.Payload)
}

func (o *SetChatDescriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseBool)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetChatDescriptionBadRequest creates a SetChatDescriptionBadRequest with default headers values
func NewSetChatDescriptionBadRequest() *SetChatDescriptionBadRequest {
	return &SetChatDescriptionBadRequest{}
}

/*SetChatDescriptionBadRequest handles this case with default header values.

Bad Request
*/
type SetChatDescriptionBadRequest struct {
	Payload *models.Error
}

func (o *SetChatDescriptionBadRequest) Error() string {
	return fmt.Sprintf("[POST /bot{token}/setChatDescription][%d] setChatDescriptionBadRequest  %+v", 400, o.Payload)
}

func (o *SetChatDescriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetChatDescriptionUnauthorized creates a SetChatDescriptionUnauthorized with default headers values
func NewSetChatDescriptionUnauthorized() *SetChatDescriptionUnauthorized {
	return &SetChatDescriptionUnauthorized{}
}

/*SetChatDescriptionUnauthorized handles this case with default header values.

Unauthorized
*/
type SetChatDescriptionUnauthorized struct {
	Payload *models.Error
}

func (o *SetChatDescriptionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /bot{token}/setChatDescription][%d] setChatDescriptionUnauthorized  %+v", 401, o.Payload)
}

func (o *SetChatDescriptionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetChatDescriptionForbidden creates a SetChatDescriptionForbidden with default headers values
func NewSetChatDescriptionForbidden() *SetChatDescriptionForbidden {
	return &SetChatDescriptionForbidden{}
}

/*SetChatDescriptionForbidden handles this case with default header values.

Forbidden
*/
type SetChatDescriptionForbidden struct {
	Payload *models.Error
}

func (o *SetChatDescriptionForbidden) Error() string {
	return fmt.Sprintf("[POST /bot{token}/setChatDescription][%d] setChatDescriptionForbidden  %+v", 403, o.Payload)
}

func (o *SetChatDescriptionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetChatDescriptionNotFound creates a SetChatDescriptionNotFound with default headers values
func NewSetChatDescriptionNotFound() *SetChatDescriptionNotFound {
	return &SetChatDescriptionNotFound{}
}

/*SetChatDescriptionNotFound handles this case with default header values.

Not Found
*/
type SetChatDescriptionNotFound struct {
	Payload *models.Error
}

func (o *SetChatDescriptionNotFound) Error() string {
	return fmt.Sprintf("[POST /bot{token}/setChatDescription][%d] setChatDescriptionNotFound  %+v", 404, o.Payload)
}

func (o *SetChatDescriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetChatDescriptionEnhanceYourCalm creates a SetChatDescriptionEnhanceYourCalm with default headers values
func NewSetChatDescriptionEnhanceYourCalm() *SetChatDescriptionEnhanceYourCalm {
	return &SetChatDescriptionEnhanceYourCalm{}
}

/*SetChatDescriptionEnhanceYourCalm handles this case with default header values.

Flood
*/
type SetChatDescriptionEnhanceYourCalm struct {
	Payload *models.Error
}

func (o *SetChatDescriptionEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[POST /bot{token}/setChatDescription][%d] setChatDescriptionEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *SetChatDescriptionEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetChatDescriptionInternalServerError creates a SetChatDescriptionInternalServerError with default headers values
func NewSetChatDescriptionInternalServerError() *SetChatDescriptionInternalServerError {
	return &SetChatDescriptionInternalServerError{}
}

/*SetChatDescriptionInternalServerError handles this case with default header values.

Internal
*/
type SetChatDescriptionInternalServerError struct {
	Payload *models.Error
}

func (o *SetChatDescriptionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /bot{token}/setChatDescription][%d] setChatDescriptionInternalServerError  %+v", 500, o.Payload)
}

func (o *SetChatDescriptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
