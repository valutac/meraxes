// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels(in *jlexer.Lexer, out *WebhookInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allowed_updates":
			if in.IsNull() {
				in.Skip()
				out.AllowedUpdates = nil
			} else {
				in.Delim('[')
				if out.AllowedUpdates == nil {
					if !in.IsDelim(']') {
						out.AllowedUpdates = make([]AllowedUpdate, 0, 4)
					} else {
						out.AllowedUpdates = []AllowedUpdate{}
					}
				} else {
					out.AllowedUpdates = (out.AllowedUpdates)[:0]
				}
				for !in.IsDelim(']') {
					var v1 AllowedUpdate
					v1 = AllowedUpdate(in.String())
					out.AllowedUpdates = append(out.AllowedUpdates, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "has_custom_certificate":
			if in.IsNull() {
				in.Skip()
				out.HasCustomCertificate = nil
			} else {
				if out.HasCustomCertificate == nil {
					out.HasCustomCertificate = new(bool)
				}
				*out.HasCustomCertificate = bool(in.Bool())
			}
		case "last_error_date":
			out.LastErrorDate = int64(in.Int64())
		case "last_error_message":
			out.LastErrorMessage = string(in.String())
		case "max_connections":
			out.MaxConnections = int64(in.Int64())
		case "pending_update_count":
			if in.IsNull() {
				in.Skip()
				out.PendingUpdateCount = nil
			} else {
				if out.PendingUpdateCount == nil {
					out.PendingUpdateCount = new(int64)
				}
				*out.PendingUpdateCount = int64(in.Int64())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.URL = nil
			} else {
				if out.URL == nil {
					out.URL = new(string)
				}
				*out.URL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels(out *jwriter.Writer, in WebhookInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"allowed_updates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AllowedUpdates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.AllowedUpdates {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"has_custom_certificate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.HasCustomCertificate == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.HasCustomCertificate))
		}
	}
	if in.LastErrorDate != 0 {
		const prefix string = ",\"last_error_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastErrorDate))
	}
	if in.LastErrorMessage != "" {
		const prefix string = ",\"last_error_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastErrorMessage))
	}
	if in.MaxConnections != 0 {
		const prefix string = ",\"max_connections\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MaxConnections))
	}
	{
		const prefix string = ",\"pending_update_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PendingUpdateCount == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.PendingUpdateCount))
		}
	}
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.URL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.URL))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebhookInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebhookInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebhookInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebhookInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels1(in *jlexer.Lexer, out *Voice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "duration":
			out.Duration = int64(in.Int64())
		case "file_id":
			out.FileID = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "mime_type":
			out.MimeType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels1(out *jwriter.Writer, in Voice) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Duration))
	}
	if in.FileID != "" {
		const prefix string = ",\"file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FileID))
	}
	if in.FileSize != 0 {
		const prefix string = ",\"file_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FileSize))
	}
	if in.MimeType != "" {
		const prefix string = ",\"mime_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MimeType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Voice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Voice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Voice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Voice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels1(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels2(in *jlexer.Lexer, out *VideoNote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "duration":
			out.Duration = int64(in.Int64())
		case "file_id":
			out.FileID = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "length":
			out.Length = int64(in.Int64())
		case "thumb":
			if in.IsNull() {
				in.Skip()
				out.Thumb = nil
			} else {
				if out.Thumb == nil {
					out.Thumb = new(PhotoSize)
				}
				(*out.Thumb).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels2(out *jwriter.Writer, in VideoNote) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Duration))
	}
	if in.FileID != "" {
		const prefix string = ",\"file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FileID))
	}
	if in.FileSize != 0 {
		const prefix string = ",\"file_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FileSize))
	}
	if in.Length != 0 {
		const prefix string = ",\"length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Length))
	}
	if in.Thumb != nil {
		const prefix string = ",\"thumb\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Thumb).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VideoNote) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VideoNote) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VideoNote) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VideoNote) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels2(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels3(in *jlexer.Lexer, out *Video) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "duration":
			out.Duration = int64(in.Int64())
		case "file_id":
			out.FileID = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "height":
			out.Height = int64(in.Int64())
		case "mime_type":
			out.MimeType = string(in.String())
		case "thumb":
			if in.IsNull() {
				in.Skip()
				out.Thumb = nil
			} else {
				if out.Thumb == nil {
					out.Thumb = new(PhotoSize)
				}
				(*out.Thumb).UnmarshalEasyJSON(in)
			}
		case "width":
			out.Width = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels3(out *jwriter.Writer, in Video) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Duration))
	}
	if in.FileID != "" {
		const prefix string = ",\"file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FileID))
	}
	if in.FileSize != 0 {
		const prefix string = ",\"file_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FileSize))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.MimeType != "" {
		const prefix string = ",\"mime_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MimeType))
	}
	if in.Thumb != nil {
		const prefix string = ",\"thumb\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Thumb).MarshalEasyJSON(out)
	}
	if in.Width != 0 {
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Width))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Video) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Video) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Video) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Video) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels3(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels4(in *jlexer.Lexer, out *Venue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "foursquare_id":
			out.FoursquareID = string(in.String())
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(Location)
				}
				(*out.Location).UnmarshalEasyJSON(in)
			}
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels4(out *jwriter.Writer, in Venue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Address != "" {
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	if in.FoursquareID != "" {
		const prefix string = ",\"foursquare_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FoursquareID))
	}
	if in.Location != nil {
		const prefix string = ",\"location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Location).MarshalEasyJSON(out)
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Venue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Venue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Venue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Venue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels4(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels5(in *jlexer.Lexer, out *UserProfilePhotos) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photos":
			if in.IsNull() {
				in.Skip()
				out.Photos = nil
			} else {
				in.Delim('[')
				if out.Photos == nil {
					if !in.IsDelim(']') {
						out.Photos = make(UserProfilePhotosPhotos, 0, 2)
					} else {
						out.Photos = UserProfilePhotosPhotos{}
					}
				} else {
					out.Photos = (out.Photos)[:0]
				}
				for !in.IsDelim(']') {
					var v4 UserProfilePhotosPhotosItems
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						in.Delim('[')
						if v4 == nil {
							if !in.IsDelim(']') {
								v4 = make(UserProfilePhotosPhotosItems, 0, 8)
							} else {
								v4 = UserProfilePhotosPhotosItems{}
							}
						} else {
							v4 = (v4)[:0]
						}
						for !in.IsDelim(']') {
							var v5 *PhotoSize
							if in.IsNull() {
								in.Skip()
								v5 = nil
							} else {
								if v5 == nil {
									v5 = new(PhotoSize)
								}
								(*v5).UnmarshalEasyJSON(in)
							}
							v4 = append(v4, v5)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Photos = append(out.Photos, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total_count":
			out.TotalCount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels5(out *jwriter.Writer, in UserProfilePhotos) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Photos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Photos {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v8, v9 := range v7 {
						if v8 > 0 {
							out.RawByte(',')
						}
						if v9 == nil {
							out.RawString("null")
						} else {
							(*v9).MarshalEasyJSON(out)
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if in.TotalCount != 0 {
		const prefix string = ",\"total_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TotalCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserProfilePhotos) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserProfilePhotos) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserProfilePhotos) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserProfilePhotos) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels5(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels6(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			out.FirstName = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "is_bot":
			out.IsBot = bool(in.Bool())
		case "language_code":
			out.LanguageCode = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels6(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FirstName != "" {
		const prefix string = ",\"first_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	if in.IsBot {
		const prefix string = ",\"is_bot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsBot))
	}
	if in.LanguageCode != "" {
		const prefix string = ",\"language_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LanguageCode))
	}
	if in.LastName != "" {
		const prefix string = ",\"last_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels6(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels7(in *jlexer.Lexer, out *Update) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "callback_query":
			if in.IsNull() {
				in.Skip()
				out.CallbackQuery = nil
			} else {
				if out.CallbackQuery == nil {
					out.CallbackQuery = new(CallbackQuery)
				}
				(*out.CallbackQuery).UnmarshalEasyJSON(in)
			}
		case "channel_post":
			if in.IsNull() {
				in.Skip()
				out.ChannelPost = nil
			} else {
				if out.ChannelPost == nil {
					out.ChannelPost = new(Message)
				}
				(*out.ChannelPost).UnmarshalEasyJSON(in)
			}
		case "chosen_inline_result":
			if in.IsNull() {
				in.Skip()
				out.ChosenInlineResult = nil
			} else {
				if out.ChosenInlineResult == nil {
					out.ChosenInlineResult = new(ChosenInlineResult)
				}
				(*out.ChosenInlineResult).UnmarshalEasyJSON(in)
			}
		case "edited_channel_post":
			if in.IsNull() {
				in.Skip()
				out.EditedChannelPost = nil
			} else {
				if out.EditedChannelPost == nil {
					out.EditedChannelPost = new(Message)
				}
				(*out.EditedChannelPost).UnmarshalEasyJSON(in)
			}
		case "edited_message":
			if in.IsNull() {
				in.Skip()
				out.EditedMessage = nil
			} else {
				if out.EditedMessage == nil {
					out.EditedMessage = new(Message)
				}
				(*out.EditedMessage).UnmarshalEasyJSON(in)
			}
		case "inline_query":
			if in.IsNull() {
				in.Skip()
				out.InlineQuery = nil
			} else {
				if out.InlineQuery == nil {
					out.InlineQuery = new(InlineQuery)
				}
				(*out.InlineQuery).UnmarshalEasyJSON(in)
			}
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "pre_checkout_query":
			if in.IsNull() {
				in.Skip()
				out.PreCheckoutQuery = nil
			} else {
				if out.PreCheckoutQuery == nil {
					out.PreCheckoutQuery = new(PreCheckoutQuery)
				}
				(*out.PreCheckoutQuery).UnmarshalEasyJSON(in)
			}
		case "shipping_query":
			if in.IsNull() {
				in.Skip()
				out.ShippingQuery = nil
			} else {
				if out.ShippingQuery == nil {
					out.ShippingQuery = new(ShippingQuery)
				}
				(*out.ShippingQuery).UnmarshalEasyJSON(in)
			}
		case "update_id":
			out.UpdateID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels7(out *jwriter.Writer, in Update) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CallbackQuery != nil {
		const prefix string = ",\"callback_query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CallbackQuery).MarshalEasyJSON(out)
	}
	if in.ChannelPost != nil {
		const prefix string = ",\"channel_post\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ChannelPost).MarshalEasyJSON(out)
	}
	if in.ChosenInlineResult != nil {
		const prefix string = ",\"chosen_inline_result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ChosenInlineResult).MarshalEasyJSON(out)
	}
	if in.EditedChannelPost != nil {
		const prefix string = ",\"edited_channel_post\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EditedChannelPost).MarshalEasyJSON(out)
	}
	if in.EditedMessage != nil {
		const prefix string = ",\"edited_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EditedMessage).MarshalEasyJSON(out)
	}
	if in.InlineQuery != nil {
		const prefix string = ",\"inline_query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.InlineQuery).MarshalEasyJSON(out)
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Message).MarshalEasyJSON(out)
	}
	if in.PreCheckoutQuery != nil {
		const prefix string = ",\"pre_checkout_query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PreCheckoutQuery).MarshalEasyJSON(out)
	}
	if in.ShippingQuery != nil {
		const prefix string = ",\"shipping_query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ShippingQuery).MarshalEasyJSON(out)
	}
	if in.UpdateID != 0 {
		const prefix string = ",\"update_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UpdateID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Update) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Update) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Update) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Update) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels7(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels8(in *jlexer.Lexer, out *SuccessfulPayment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency":
			out.Currency = string(in.String())
		case "invoice_payload":
			out.InvoicePayload = string(in.String())
		case "order_info":
			if in.IsNull() {
				in.Skip()
				out.OrderInfo = nil
			} else {
				if out.OrderInfo == nil {
					out.OrderInfo = new(OrderInfo)
				}
				(*out.OrderInfo).UnmarshalEasyJSON(in)
			}
		case "provider_payment_charge_id":
			out.ProviderPaymentChargeID = string(in.String())
		case "shipping_option_id":
			out.ShippingOptionID = string(in.String())
		case "telegram_payment_charge_id":
			out.TelegramPaymentChargeID = string(in.String())
		case "total_amount":
			out.TotalAmount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels8(out *jwriter.Writer, in SuccessfulPayment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.InvoicePayload != "" {
		const prefix string = ",\"invoice_payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InvoicePayload))
	}
	if in.OrderInfo != nil {
		const prefix string = ",\"order_info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OrderInfo).MarshalEasyJSON(out)
	}
	if in.ProviderPaymentChargeID != "" {
		const prefix string = ",\"provider_payment_charge_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProviderPaymentChargeID))
	}
	if in.ShippingOptionID != "" {
		const prefix string = ",\"shipping_option_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ShippingOptionID))
	}
	if in.TelegramPaymentChargeID != "" {
		const prefix string = ",\"telegram_payment_charge_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TelegramPaymentChargeID))
	}
	if in.TotalAmount != 0 {
		const prefix string = ",\"total_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TotalAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SuccessfulPayment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SuccessfulPayment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SuccessfulPayment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SuccessfulPayment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels8(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels9(in *jlexer.Lexer, out *StopMessageLiveLocationBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "inline_message_id":
			out.InlineMessageID = string(in.String())
		case "message_id":
			out.MessageID = int64(in.Int64())
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels9(out *jwriter.Writer, in StopMessageLiveLocationBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ChatID != nil {
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.InlineMessageID != "" {
		const prefix string = ",\"inline_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InlineMessageID))
	}
	if in.MessageID != 0 {
		const prefix string = ",\"message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MessageID))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StopMessageLiveLocationBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StopMessageLiveLocationBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StopMessageLiveLocationBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StopMessageLiveLocationBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels9(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels10(in *jlexer.Lexer, out *StickerSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_masks":
			out.IsMasks = bool(in.Bool())
		case "name":
			out.Name = string(in.String())
		case "stickers":
			if in.IsNull() {
				in.Skip()
				out.Stickers = nil
			} else {
				in.Delim('[')
				if out.Stickers == nil {
					if !in.IsDelim(']') {
						out.Stickers = make(StickerSetStickers, 0, 8)
					} else {
						out.Stickers = StickerSetStickers{}
					}
				} else {
					out.Stickers = (out.Stickers)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *Sticker
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(Sticker)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.Stickers = append(out.Stickers, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels10(out *jwriter.Writer, in StickerSet) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IsMasks {
		const prefix string = ",\"is_masks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsMasks))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"stickers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Stickers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Stickers {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StickerSet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StickerSet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StickerSet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StickerSet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels10(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels11(in *jlexer.Lexer, out *Sticker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "emoji":
			out.Emoji = string(in.String())
		case "file_id":
			out.FileID = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "height":
			out.Height = int64(in.Int64())
		case "mask_position":
			if in.IsNull() {
				in.Skip()
				out.MaskPosition = nil
			} else {
				if out.MaskPosition == nil {
					out.MaskPosition = new(MaskPosition)
				}
				(*out.MaskPosition).UnmarshalEasyJSON(in)
			}
		case "set_name":
			out.SetName = string(in.String())
		case "thumb":
			if in.IsNull() {
				in.Skip()
				out.Thumb = nil
			} else {
				if out.Thumb == nil {
					out.Thumb = new(PhotoSize)
				}
				(*out.Thumb).UnmarshalEasyJSON(in)
			}
		case "width":
			out.Width = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels11(out *jwriter.Writer, in Sticker) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Emoji != "" {
		const prefix string = ",\"emoji\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Emoji))
	}
	if in.FileID != "" {
		const prefix string = ",\"file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FileID))
	}
	if in.FileSize != 0 {
		const prefix string = ",\"file_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FileSize))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.MaskPosition != nil {
		const prefix string = ",\"mask_position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.MaskPosition).MarshalEasyJSON(out)
	}
	if in.SetName != "" {
		const prefix string = ",\"set_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SetName))
	}
	if in.Thumb != nil {
		const prefix string = ",\"thumb\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Thumb).MarshalEasyJSON(out)
	}
	if in.Width != 0 {
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Width))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Sticker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Sticker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Sticker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Sticker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels11(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels12(in *jlexer.Lexer, out *ShippingQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(User)
				}
				(*out.From).UnmarshalEasyJSON(in)
			}
		case "id":
			out.ID = string(in.String())
		case "invoice_payload":
			out.InvoicePayload = string(in.String())
		case "shipping_address":
			if in.IsNull() {
				in.Skip()
				out.ShippingAddress = nil
			} else {
				if out.ShippingAddress == nil {
					out.ShippingAddress = new(ShippingAddress)
				}
				(*out.ShippingAddress).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels12(out *jwriter.Writer, in ShippingQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.From).MarshalEasyJSON(out)
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.InvoicePayload != "" {
		const prefix string = ",\"invoice_payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InvoicePayload))
	}
	if in.ShippingAddress != nil {
		const prefix string = ",\"shipping_address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ShippingAddress).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShippingQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShippingQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShippingQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShippingQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels12(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels13(in *jlexer.Lexer, out *ShippingOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "prices":
			if in.IsNull() {
				in.Skip()
				out.Prices = nil
			} else {
				in.Delim('[')
				if out.Prices == nil {
					if !in.IsDelim(']') {
						out.Prices = make(ShippingOptionPrices, 0, 8)
					} else {
						out.Prices = ShippingOptionPrices{}
					}
				} else {
					out.Prices = (out.Prices)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *LabeledPrice
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(LabeledPrice)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.Prices = append(out.Prices, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels13(out *jwriter.Writer, in ShippingOption) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"prices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Prices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Prices {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShippingOption) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShippingOption) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShippingOption) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShippingOption) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels13(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels14(in *jlexer.Lexer, out *ShippingAddress) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "city":
			out.City = string(in.String())
		case "country_code":
			out.CountryCode = string(in.String())
		case "post_code":
			out.PostCode = string(in.String())
		case "stat":
			out.Stat = string(in.String())
		case "street_line1":
			out.StreetLine1 = string(in.String())
		case "street_line2":
			out.StreetLine2 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels14(out *jwriter.Writer, in ShippingAddress) {
	out.RawByte('{')
	first := true
	_ = first
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.CountryCode != "" {
		const prefix string = ",\"country_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CountryCode))
	}
	if in.PostCode != "" {
		const prefix string = ",\"post_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PostCode))
	}
	if in.Stat != "" {
		const prefix string = ",\"stat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Stat))
	}
	if in.StreetLine1 != "" {
		const prefix string = ",\"street_line1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StreetLine1))
	}
	if in.StreetLine2 != "" {
		const prefix string = ",\"street_line2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StreetLine2))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShippingAddress) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShippingAddress) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShippingAddress) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShippingAddress) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels14(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels15(in *jlexer.Lexer, out *SetGameScoreOKBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if m, ok := out.Result.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Result.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Result = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels15(out *jwriter.Writer, in SetGameScoreOKBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	if in.Result != nil {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Result.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Result.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Result))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetGameScoreOKBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetGameScoreOKBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetGameScoreOKBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetGameScoreOKBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels15(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels16(in *jlexer.Lexer, out *SendVoiceLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "duration":
			out.Duration = int64(in.Int64())
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		case "voice":
			if in.IsNull() {
				in.Skip()
				out.Voice = nil
			} else {
				if out.Voice == nil {
					out.Voice = new(string)
				}
				*out.Voice = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels16(out *jwriter.Writer, in SendVoiceLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.DisableNotification {
		const prefix string = ",\"disable_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableNotification))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Duration))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		const prefix string = ",\"reply_to_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReplyToMessageID))
	}
	{
		const prefix string = ",\"voice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Voice == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Voice))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendVoiceLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendVoiceLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendVoiceLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendVoiceLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels16(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels17(in *jlexer.Lexer, out *SendVideoNoteLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "duration":
			out.Duration = int64(in.Int64())
		case "length":
			out.Length = int64(in.Int64())
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		case "video_note":
			if in.IsNull() {
				in.Skip()
				out.VideoNote = nil
			} else {
				if out.VideoNote == nil {
					out.VideoNote = new(string)
				}
				*out.VideoNote = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels17(out *jwriter.Writer, in SendVideoNoteLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.DisableNotification {
		const prefix string = ",\"disable_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableNotification))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Duration))
	}
	if in.Length != 0 {
		const prefix string = ",\"length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Length))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		const prefix string = ",\"reply_to_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReplyToMessageID))
	}
	{
		const prefix string = ",\"video_note\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.VideoNote == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.VideoNote))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendVideoNoteLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendVideoNoteLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendVideoNoteLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendVideoNoteLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels17(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels18(in *jlexer.Lexer, out *SendVideoLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "duration":
			out.Duration = int64(in.Int64())
		case "height":
			out.Height = int64(in.Int64())
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(string)
				}
				*out.Video = string(in.String())
			}
		case "width":
			out.Width = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels18(out *jwriter.Writer, in SendVideoLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.DisableNotification {
		const prefix string = ",\"disable_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableNotification))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Duration))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		const prefix string = ",\"reply_to_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReplyToMessageID))
	}
	{
		const prefix string = ",\"video\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Video == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Video))
		}
	}
	if in.Width != 0 {
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Width))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendVideoLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendVideoLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendVideoLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendVideoLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels18(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels19(in *jlexer.Lexer, out *SendVenueBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				if out.Address == nil {
					out.Address = new(string)
				}
				*out.Address = string(in.String())
			}
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "foursquare_id":
			out.FoursquareID = string(in.String())
		case "latitude":
			if in.IsNull() {
				in.Skip()
				out.Latitude = nil
			} else {
				if out.Latitude == nil {
					out.Latitude = new(float64)
				}
				*out.Latitude = float64(in.Float64())
			}
		case "longitude":
			if in.IsNull() {
				in.Skip()
				out.Longitude = nil
			} else {
				if out.Longitude == nil {
					out.Longitude = new(float64)
				}
				*out.Longitude = float64(in.Float64())
			}
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels19(out *jwriter.Writer, in SendVenueBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Address == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Address))
		}
	}
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.DisableNotification {
		const prefix string = ",\"disable_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableNotification))
	}
	if in.FoursquareID != "" {
		const prefix string = ",\"foursquare_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FoursquareID))
	}
	{
		const prefix string = ",\"latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Latitude == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Latitude))
		}
	}
	{
		const prefix string = ",\"longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Longitude == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Longitude))
		}
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		const prefix string = ",\"reply_to_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReplyToMessageID))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendVenueBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendVenueBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendVenueBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendVenueBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels19(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels20(in *jlexer.Lexer, out *SendStickerLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		case "sticker":
			if in.IsNull() {
				in.Skip()
				out.Sticker = nil
			} else {
				if out.Sticker == nil {
					out.Sticker = new(string)
				}
				*out.Sticker = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels20(out *jwriter.Writer, in SendStickerLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.DisableNotification {
		const prefix string = ",\"disable_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableNotification))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		const prefix string = ",\"reply_to_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReplyToMessageID))
	}
	{
		const prefix string = ",\"sticker\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Sticker == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Sticker))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendStickerLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendStickerLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendStickerLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendStickerLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels20(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels21(in *jlexer.Lexer, out *SendPhotoLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				if out.Photo == nil {
					out.Photo = new(string)
				}
				*out.Photo = string(in.String())
			}
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels21(out *jwriter.Writer, in SendPhotoLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.DisableNotification {
		const prefix string = ",\"disable_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableNotification))
	}
	{
		const prefix string = ",\"photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Photo == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Photo))
		}
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		const prefix string = ",\"reply_to_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReplyToMessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendPhotoLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendPhotoLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendPhotoLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendPhotoLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels21(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels22(in *jlexer.Lexer, out *SendMessageBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "disable_web_page_preview":
			out.DisableWebPagePreview = bool(in.Bool())
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels22(out *jwriter.Writer, in SendMessageBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.DisableNotification {
		const prefix string = ",\"disable_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableNotification))
	}
	if in.DisableWebPagePreview {
		const prefix string = ",\"disable_web_page_preview\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableWebPagePreview))
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		const prefix string = ",\"reply_to_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReplyToMessageID))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Text == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Text))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendMessageBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendMessageBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendMessageBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendMessageBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels22(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels23(in *jlexer.Lexer, out *SendMediaGroupLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "media":
			if in.IsNull() {
				in.Skip()
				out.Media = nil
			} else {
				in.Delim('[')
				if out.Media == nil {
					if !in.IsDelim(']') {
						out.Media = make([]interface{}, 0, 4)
					} else {
						out.Media = []interface{}{}
					}
				} else {
					out.Media = (out.Media)[:0]
				}
				for !in.IsDelim(']') {
					var v16 interface{}
					if m, ok := v16.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v16.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v16 = in.Interface()
					}
					out.Media = append(out.Media, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels23(out *jwriter.Writer, in SendMediaGroupLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.DisableNotification {
		const prefix string = ",\"disable_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableNotification))
	}
	{
		const prefix string = ",\"media\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Media == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Media {
				if v17 > 0 {
					out.RawByte(',')
				}
				if m, ok := v18.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v18.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v18))
				}
			}
			out.RawByte(']')
		}
	}
	if in.ReplyToMessageID != 0 {
		const prefix string = ",\"reply_to_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReplyToMessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendMediaGroupLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendMediaGroupLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendMediaGroupLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendMediaGroupLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels23(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels24(in *jlexer.Lexer, out *SendLocationBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "latitude":
			if in.IsNull() {
				in.Skip()
				out.Latitude = nil
			} else {
				if out.Latitude == nil {
					out.Latitude = new(float64)
				}
				*out.Latitude = float64(in.Float64())
			}
		case "live_period":
			out.LivePeriod = int64(in.Int64())
		case "longitude":
			if in.IsNull() {
				in.Skip()
				out.Longitude = nil
			} else {
				if out.Longitude == nil {
					out.Longitude = new(float64)
				}
				*out.Longitude = float64(in.Float64())
			}
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels24(out *jwriter.Writer, in SendLocationBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.DisableNotification {
		const prefix string = ",\"disable_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableNotification))
	}
	{
		const prefix string = ",\"latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Latitude == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Latitude))
		}
	}
	if in.LivePeriod != 0 {
		const prefix string = ",\"live_period\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LivePeriod))
	}
	{
		const prefix string = ",\"longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Longitude == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Longitude))
		}
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		const prefix string = ",\"reply_to_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReplyToMessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendLocationBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendLocationBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendLocationBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendLocationBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels24(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels25(in *jlexer.Lexer, out *SendInvoiceBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if in.IsNull() {
				in.Skip()
				out.ChatID = nil
			} else {
				if out.ChatID == nil {
					out.ChatID = new(int64)
				}
				*out.ChatID = int64(in.Int64())
			}
		case "currency":
			if in.IsNull() {
				in.Skip()
				out.Currency = nil
			} else {
				if out.Currency == nil {
					out.Currency = new(string)
				}
				*out.Currency = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "is_flexible":
			out.IsFlexible = bool(in.Bool())
		case "need_email":
			out.NeedEmail = bool(in.Bool())
		case "need_name":
			out.NeedName = bool(in.Bool())
		case "need_phone_number":
			out.NeedPhoneNumber = bool(in.Bool())
		case "need_shipping_address":
			out.NeedShippingAddress = bool(in.Bool())
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				if out.Payload == nil {
					out.Payload = new(string)
				}
				*out.Payload = string(in.String())
			}
		case "photo_height":
			out.PhotoHeight = int64(in.Int64())
		case "photo_size":
			out.PhotoSize = int64(in.Int64())
		case "photo_url":
			out.PhotoURL = string(in.String())
		case "photo_width":
			out.PhotoWidth = int64(in.Int64())
		case "prices":
			if in.IsNull() {
				in.Skip()
				out.Prices = nil
			} else {
				in.Delim('[')
				if out.Prices == nil {
					if !in.IsDelim(']') {
						out.Prices = make(SendInvoiceBodyPrices, 0, 8)
					} else {
						out.Prices = SendInvoiceBodyPrices{}
					}
				} else {
					out.Prices = (out.Prices)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *LabeledPrice
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(LabeledPrice)
						}
						(*v19).UnmarshalEasyJSON(in)
					}
					out.Prices = append(out.Prices, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "provider_data":
			out.ProviderData = string(in.String())
		case "provider_token":
			if in.IsNull() {
				in.Skip()
				out.ProviderToken = nil
			} else {
				if out.ProviderToken == nil {
					out.ProviderToken = new(string)
				}
				*out.ProviderToken = string(in.String())
			}
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		case "start_parameter":
			if in.IsNull() {
				in.Skip()
				out.StartParameter = nil
			} else {
				if out.StartParameter == nil {
					out.StartParameter = new(string)
				}
				*out.StartParameter = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels25(out *jwriter.Writer, in SendInvoiceBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ChatID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.ChatID))
		}
	}
	{
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Currency == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Currency))
		}
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	if in.DisableNotification {
		const prefix string = ",\"disable_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableNotification))
	}
	if in.IsFlexible {
		const prefix string = ",\"is_flexible\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsFlexible))
	}
	if in.NeedEmail {
		const prefix string = ",\"need_email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.NeedEmail))
	}
	if in.NeedName {
		const prefix string = ",\"need_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.NeedName))
	}
	if in.NeedPhoneNumber {
		const prefix string = ",\"need_phone_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.NeedPhoneNumber))
	}
	if in.NeedShippingAddress {
		const prefix string = ",\"need_shipping_address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.NeedShippingAddress))
	}
	{
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Payload == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Payload))
		}
	}
	if in.PhotoHeight != 0 {
		const prefix string = ",\"photo_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PhotoHeight))
	}
	if in.PhotoSize != 0 {
		const prefix string = ",\"photo_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PhotoSize))
	}
	if in.PhotoURL != "" {
		const prefix string = ",\"photo_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PhotoURL))
	}
	if in.PhotoWidth != 0 {
		const prefix string = ",\"photo_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PhotoWidth))
	}
	{
		const prefix string = ",\"prices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Prices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Prices {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					(*v21).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.ProviderData != "" {
		const prefix string = ",\"provider_data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProviderData))
	}
	{
		const prefix string = ",\"provider_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ProviderToken == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ProviderToken))
		}
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		const prefix string = ",\"reply_to_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReplyToMessageID))
	}
	{
		const prefix string = ",\"start_parameter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.StartParameter == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.StartParameter))
		}
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendInvoiceBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendInvoiceBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendInvoiceBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendInvoiceBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels25(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels26(in *jlexer.Lexer, out *SendGameBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if in.IsNull() {
				in.Skip()
				out.ChatID = nil
			} else {
				if out.ChatID == nil {
					out.ChatID = new(int64)
				}
				*out.ChatID = int64(in.Int64())
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "game_short_name":
			if in.IsNull() {
				in.Skip()
				out.GameShortName = nil
			} else {
				if out.GameShortName == nil {
					out.GameShortName = new(string)
				}
				*out.GameShortName = string(in.String())
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels26(out *jwriter.Writer, in SendGameBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ChatID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.ChatID))
		}
	}
	if in.DisableNotification {
		const prefix string = ",\"disable_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableNotification))
	}
	{
		const prefix string = ",\"game_short_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.GameShortName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.GameShortName))
		}
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	if in.ReplyToMessageID != 0 {
		const prefix string = ",\"reply_to_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReplyToMessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendGameBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendGameBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendGameBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendGameBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels26(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels27(in *jlexer.Lexer, out *SendDocumentLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "document":
			if in.IsNull() {
				in.Skip()
				out.Document = nil
			} else {
				if out.Document == nil {
					out.Document = new(string)
				}
				*out.Document = string(in.String())
			}
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels27(out *jwriter.Writer, in SendDocumentLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.DisableNotification {
		const prefix string = ",\"disable_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableNotification))
	}
	{
		const prefix string = ",\"document\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Document == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Document))
		}
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		const prefix string = ",\"reply_to_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReplyToMessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendDocumentLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendDocumentLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendDocumentLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendDocumentLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels27(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels28(in *jlexer.Lexer, out *SendContactBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "first_name":
			if in.IsNull() {
				in.Skip()
				out.FirstName = nil
			} else {
				if out.FirstName == nil {
					out.FirstName = new(string)
				}
				*out.FirstName = string(in.String())
			}
		case "last_name":
			out.LastName = string(in.String())
		case "phone_number":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels28(out *jwriter.Writer, in SendContactBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.DisableNotification {
		const prefix string = ",\"disable_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableNotification))
	}
	{
		const prefix string = ",\"first_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.FirstName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FirstName))
		}
	}
	if in.LastName != "" {
		const prefix string = ",\"last_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"phone_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PhoneNumber == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PhoneNumber))
		}
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		const prefix string = ",\"reply_to_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReplyToMessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendContactBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendContactBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendContactBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendContactBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels28(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels29(in *jlexer.Lexer, out *SendAudioLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.Audio = nil
			} else {
				if out.Audio == nil {
					out.Audio = new(string)
				}
				*out.Audio = string(in.String())
			}
		case "caption":
			out.Caption = string(in.String())
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "duration":
			out.Duration = int64(in.Int64())
		case "performer":
			out.Performer = string(in.String())
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels29(out *jwriter.Writer, in SendAudioLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"audio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Audio == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Audio))
		}
	}
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.DisableNotification {
		const prefix string = ",\"disable_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableNotification))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Duration))
	}
	if in.Performer != "" {
		const prefix string = ",\"performer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Performer))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		const prefix string = ",\"reply_to_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReplyToMessageID))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendAudioLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendAudioLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendAudioLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendAudioLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels29(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels30(in *jlexer.Lexer, out *RestrictChatMemberBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "can_add_web_page_previews":
			out.CanAddWebPagePreviews = bool(in.Bool())
		case "can_send_media_messages":
			out.CanSendMediaMessages = bool(in.Bool())
		case "can_send_messages":
			out.CanSendMessages = bool(in.Bool())
		case "can_send_other_messages":
			out.CanSendOtherMessages = bool(in.Bool())
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "until_date":
			out.UntilDate = int64(in.Int64())
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserID = nil
			} else {
				if out.UserID == nil {
					out.UserID = new(int64)
				}
				*out.UserID = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels30(out *jwriter.Writer, in RestrictChatMemberBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CanAddWebPagePreviews {
		const prefix string = ",\"can_add_web_page_previews\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanAddWebPagePreviews))
	}
	if in.CanSendMediaMessages {
		const prefix string = ",\"can_send_media_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanSendMediaMessages))
	}
	if in.CanSendMessages {
		const prefix string = ",\"can_send_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanSendMessages))
	}
	if in.CanSendOtherMessages {
		const prefix string = ",\"can_send_other_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanSendOtherMessages))
	}
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.UntilDate != 0 {
		const prefix string = ",\"until_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UntilDate))
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UserID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.UserID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RestrictChatMemberBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RestrictChatMemberBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RestrictChatMemberBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RestrictChatMemberBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels30(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels31(in *jlexer.Lexer, out *ResponseUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				in.Delim('[')
				if out.Result == nil {
					if !in.IsDelim(']') {
						out.Result = make(ResponseUpdateResult, 0, 8)
					} else {
						out.Result = ResponseUpdateResult{}
					}
				} else {
					out.Result = (out.Result)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *Update
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(Update)
						}
						(*v22).UnmarshalEasyJSON(in)
					}
					out.Result = append(out.Result, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels31(out *jwriter.Writer, in ResponseUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	{
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Result == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Result {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					(*v24).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels31(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels32(in *jlexer.Lexer, out *ResponseParameters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "migrate_to_chat_id":
			out.MigrateToChatID = int64(in.Int64())
		case "retry_after":
			out.RetryAfter = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels32(out *jwriter.Writer, in ResponseParameters) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MigrateToChatID != 0 {
		const prefix string = ",\"migrate_to_chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MigrateToChatID))
	}
	if in.RetryAfter != 0 {
		const prefix string = ",\"retry_after\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RetryAfter))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseParameters) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseParameters) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseParameters) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseParameters) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels32(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels33(in *jlexer.Lexer, out *ResponseMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(Message)
				}
				(*out.Result).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels33(out *jwriter.Writer, in ResponseMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	if in.Result != nil {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Result).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels33(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels34(in *jlexer.Lexer, out *ResponseBool) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			out.Result = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels34(out *jwriter.Writer, in ResponseBool) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	if in.Result {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Result))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseBool) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseBool) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseBool) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseBool) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels34(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels35(in *jlexer.Lexer, out *ReplyKeyboardRemove) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "remove_keyboard":
			out.RemoveKeyboard = bool(in.Bool())
		case "selective":
			out.Selective = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels35(out *jwriter.Writer, in ReplyKeyboardRemove) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RemoveKeyboard {
		const prefix string = ",\"remove_keyboard\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RemoveKeyboard))
	}
	if in.Selective {
		const prefix string = ",\"selective\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Selective))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplyKeyboardRemove) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplyKeyboardRemove) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplyKeyboardRemove) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplyKeyboardRemove) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels35(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels36(in *jlexer.Lexer, out *ReplyKeyboardMarkup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "keyboard":
			if in.IsNull() {
				in.Skip()
				out.Keyboard = nil
			} else {
				in.Delim('[')
				if out.Keyboard == nil {
					if !in.IsDelim(']') {
						out.Keyboard = make(ReplyKeyboardMarkupKeyboard, 0, 2)
					} else {
						out.Keyboard = ReplyKeyboardMarkupKeyboard{}
					}
				} else {
					out.Keyboard = (out.Keyboard)[:0]
				}
				for !in.IsDelim(']') {
					var v25 ReplyKeyboardMarkupKeyboardItems
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						in.Delim('[')
						if v25 == nil {
							if !in.IsDelim(']') {
								v25 = make(ReplyKeyboardMarkupKeyboardItems, 0, 8)
							} else {
								v25 = ReplyKeyboardMarkupKeyboardItems{}
							}
						} else {
							v25 = (v25)[:0]
						}
						for !in.IsDelim(']') {
							var v26 *KeyboardButton
							if in.IsNull() {
								in.Skip()
								v26 = nil
							} else {
								if v26 == nil {
									v26 = new(KeyboardButton)
								}
								(*v26).UnmarshalEasyJSON(in)
							}
							v25 = append(v25, v26)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Keyboard = append(out.Keyboard, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "one_time_keyboard":
			out.OneTimeKeyboard = bool(in.Bool())
		case "resize_keyboard":
			out.ResizeKeyboard = bool(in.Bool())
		case "selective":
			out.Selective = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels36(out *jwriter.Writer, in ReplyKeyboardMarkup) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"keyboard\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Keyboard == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Keyboard {
				if v27 > 0 {
					out.RawByte(',')
				}
				if v28 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v29, v30 := range v28 {
						if v29 > 0 {
							out.RawByte(',')
						}
						if v30 == nil {
							out.RawString("null")
						} else {
							(*v30).MarshalEasyJSON(out)
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if in.OneTimeKeyboard {
		const prefix string = ",\"one_time_keyboard\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.OneTimeKeyboard))
	}
	if in.ResizeKeyboard {
		const prefix string = ",\"resize_keyboard\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ResizeKeyboard))
	}
	if in.Selective {
		const prefix string = ",\"selective\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Selective))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplyKeyboardMarkup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplyKeyboardMarkup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplyKeyboardMarkup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplyKeyboardMarkup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels36(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels37(in *jlexer.Lexer, out *PromoteChatMemberBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "can_change_info":
			if in.IsNull() {
				in.Skip()
				out.CanChangeInfo = nil
			} else {
				if out.CanChangeInfo == nil {
					out.CanChangeInfo = new(bool)
				}
				*out.CanChangeInfo = bool(in.Bool())
			}
		case "can_delete_messages":
			if in.IsNull() {
				in.Skip()
				out.CanDeleteMessages = nil
			} else {
				if out.CanDeleteMessages == nil {
					out.CanDeleteMessages = new(bool)
				}
				*out.CanDeleteMessages = bool(in.Bool())
			}
		case "can_edit_messages":
			if in.IsNull() {
				in.Skip()
				out.CanEditMessages = nil
			} else {
				if out.CanEditMessages == nil {
					out.CanEditMessages = new(bool)
				}
				*out.CanEditMessages = bool(in.Bool())
			}
		case "can_invite_users":
			if in.IsNull() {
				in.Skip()
				out.CanInviteUsers = nil
			} else {
				if out.CanInviteUsers == nil {
					out.CanInviteUsers = new(bool)
				}
				*out.CanInviteUsers = bool(in.Bool())
			}
		case "can_pin_messages":
			if in.IsNull() {
				in.Skip()
				out.CanPinMessages = nil
			} else {
				if out.CanPinMessages == nil {
					out.CanPinMessages = new(bool)
				}
				*out.CanPinMessages = bool(in.Bool())
			}
		case "can_post_messages":
			if in.IsNull() {
				in.Skip()
				out.CanPostMessages = nil
			} else {
				if out.CanPostMessages == nil {
					out.CanPostMessages = new(bool)
				}
				*out.CanPostMessages = bool(in.Bool())
			}
		case "can_promote_members":
			if in.IsNull() {
				in.Skip()
				out.CanPromoteMembers = nil
			} else {
				if out.CanPromoteMembers == nil {
					out.CanPromoteMembers = new(bool)
				}
				*out.CanPromoteMembers = bool(in.Bool())
			}
		case "can_restrict_members":
			if in.IsNull() {
				in.Skip()
				out.CanRestrictMembers = nil
			} else {
				if out.CanRestrictMembers == nil {
					out.CanRestrictMembers = new(bool)
				}
				*out.CanRestrictMembers = bool(in.Bool())
			}
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserID = nil
			} else {
				if out.UserID == nil {
					out.UserID = new(int64)
				}
				*out.UserID = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels37(out *jwriter.Writer, in PromoteChatMemberBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CanChangeInfo != nil {
		const prefix string = ",\"can_change_info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.CanChangeInfo))
	}
	if in.CanDeleteMessages != nil {
		const prefix string = ",\"can_delete_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.CanDeleteMessages))
	}
	if in.CanEditMessages != nil {
		const prefix string = ",\"can_edit_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.CanEditMessages))
	}
	if in.CanInviteUsers != nil {
		const prefix string = ",\"can_invite_users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.CanInviteUsers))
	}
	if in.CanPinMessages != nil {
		const prefix string = ",\"can_pin_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.CanPinMessages))
	}
	if in.CanPostMessages != nil {
		const prefix string = ",\"can_post_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.CanPostMessages))
	}
	if in.CanPromoteMembers != nil {
		const prefix string = ",\"can_promote_members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.CanPromoteMembers))
	}
	if in.CanRestrictMembers != nil {
		const prefix string = ",\"can_restrict_members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.CanRestrictMembers))
	}
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UserID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.UserID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PromoteChatMemberBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PromoteChatMemberBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PromoteChatMemberBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PromoteChatMemberBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels37(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels38(in *jlexer.Lexer, out *PreCheckoutQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency":
			out.Currency = string(in.String())
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(User)
				}
				(*out.From).UnmarshalEasyJSON(in)
			}
		case "id":
			out.ID = string(in.String())
		case "invoice_payload":
			out.InvoicePayload = string(in.String())
		case "order_info":
			if in.IsNull() {
				in.Skip()
				out.OrderInfo = nil
			} else {
				if out.OrderInfo == nil {
					out.OrderInfo = new(OrderInfo)
				}
				(*out.OrderInfo).UnmarshalEasyJSON(in)
			}
		case "shipping_option_id":
			out.ShippingOptionID = string(in.String())
		case "total_amount":
			out.TotalAmount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels38(out *jwriter.Writer, in PreCheckoutQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.From).MarshalEasyJSON(out)
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.InvoicePayload != "" {
		const prefix string = ",\"invoice_payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InvoicePayload))
	}
	if in.OrderInfo != nil {
		const prefix string = ",\"order_info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OrderInfo).MarshalEasyJSON(out)
	}
	if in.ShippingOptionID != "" {
		const prefix string = ",\"shipping_option_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ShippingOptionID))
	}
	if in.TotalAmount != 0 {
		const prefix string = ",\"total_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TotalAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PreCheckoutQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PreCheckoutQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PreCheckoutQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PreCheckoutQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels38(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels39(in *jlexer.Lexer, out *PhotoSize) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file_id":
			out.FileID = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "height":
			out.Height = int64(in.Int64())
		case "width":
			out.Width = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels39(out *jwriter.Writer, in PhotoSize) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FileID != "" {
		const prefix string = ",\"file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FileID))
	}
	if in.FileSize != 0 {
		const prefix string = ",\"file_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FileSize))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.Width != 0 {
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Width))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoSize) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoSize) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoSize) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoSize) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels39(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels40(in *jlexer.Lexer, out *OrderInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "phone_number":
			out.PhoneNumber = string(in.String())
		case "shipping_address":
			if in.IsNull() {
				in.Skip()
				out.ShippingAddress = nil
			} else {
				if out.ShippingAddress == nil {
					out.ShippingAddress = new(ShippingAddress)
				}
				(*out.ShippingAddress).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels40(out *jwriter.Writer, in OrderInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.PhoneNumber != "" {
		const prefix string = ",\"phone_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PhoneNumber))
	}
	if in.ShippingAddress != nil {
		const prefix string = ",\"shipping_address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ShippingAddress).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels40(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels41(in *jlexer.Lexer, out *MessageEntity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "length":
			out.Length = int64(in.Int64())
		case "offset":
			out.Offset = int64(in.Int64())
		case "type":
			out.Type = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels41(out *jwriter.Writer, in MessageEntity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Length != 0 {
		const prefix string = ",\"length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Length))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Offset))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageEntity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageEntity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageEntity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageEntity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels41(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels42(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.Audio = nil
			} else {
				if out.Audio == nil {
					out.Audio = new(Audio)
				}
				(*out.Audio).UnmarshalEasyJSON(in)
			}
		case "author_signature":
			out.AuthorSignature = string(in.String())
		case "caption":
			out.Caption = string(in.String())
		case "caption_entities":
			if in.IsNull() {
				in.Skip()
				out.CaptionEntities = nil
			} else {
				in.Delim('[')
				if out.CaptionEntities == nil {
					if !in.IsDelim(']') {
						out.CaptionEntities = make(MessageCaptionEntities, 0, 8)
					} else {
						out.CaptionEntities = MessageCaptionEntities{}
					}
				} else {
					out.CaptionEntities = (out.CaptionEntities)[:0]
				}
				for !in.IsDelim(']') {
					var v31 *MessageEntity
					if in.IsNull() {
						in.Skip()
						v31 = nil
					} else {
						if v31 == nil {
							v31 = new(MessageEntity)
						}
						(*v31).UnmarshalEasyJSON(in)
					}
					out.CaptionEntities = append(out.CaptionEntities, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "channel_chat_created":
			out.ChannelChatCreated = bool(in.Bool())
		case "chat":
			if in.IsNull() {
				in.Skip()
				out.Chat = nil
			} else {
				if out.Chat == nil {
					out.Chat = new(Chat)
				}
				(*out.Chat).UnmarshalEasyJSON(in)
			}
		case "connected_website":
			out.ConnectedWebsite = string(in.String())
		case "contact":
			if in.IsNull() {
				in.Skip()
				out.Contact = nil
			} else {
				if out.Contact == nil {
					out.Contact = new(Contact)
				}
				(*out.Contact).UnmarshalEasyJSON(in)
			}
		case "date":
			out.Date = int64(in.Int64())
		case "delete_chat_photo":
			out.DeleteChatPhoto = bool(in.Bool())
		case "document":
			if in.IsNull() {
				in.Skip()
				out.Document = nil
			} else {
				if out.Document == nil {
					out.Document = new(Document)
				}
				(*out.Document).UnmarshalEasyJSON(in)
			}
		case "edit_date":
			out.EditDate = int64(in.Int64())
		case "entities":
			if in.IsNull() {
				in.Skip()
				out.Entities = nil
			} else {
				in.Delim('[')
				if out.Entities == nil {
					if !in.IsDelim(']') {
						out.Entities = make(MessageEntities, 0, 8)
					} else {
						out.Entities = MessageEntities{}
					}
				} else {
					out.Entities = (out.Entities)[:0]
				}
				for !in.IsDelim(']') {
					var v32 *MessageEntity
					if in.IsNull() {
						in.Skip()
						v32 = nil
					} else {
						if v32 == nil {
							v32 = new(MessageEntity)
						}
						(*v32).UnmarshalEasyJSON(in)
					}
					out.Entities = append(out.Entities, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "forward_date":
			out.ForwardDate = int64(in.Int64())
		case "forward_from":
			if in.IsNull() {
				in.Skip()
				out.ForwardFrom = nil
			} else {
				if out.ForwardFrom == nil {
					out.ForwardFrom = new(User)
				}
				(*out.ForwardFrom).UnmarshalEasyJSON(in)
			}
		case "forward_from_chat":
			if in.IsNull() {
				in.Skip()
				out.ForwardFromChat = nil
			} else {
				if out.ForwardFromChat == nil {
					out.ForwardFromChat = new(Chat)
				}
				(*out.ForwardFromChat).UnmarshalEasyJSON(in)
			}
		case "forward_from_message_id":
			out.ForwardFromMessageID = int64(in.Int64())
		case "forward_signature":
			out.ForwardSignature = string(in.String())
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(User)
				}
				(*out.From).UnmarshalEasyJSON(in)
			}
		case "game":
			if in.IsNull() {
				in.Skip()
				out.Game = nil
			} else {
				if out.Game == nil {
					out.Game = new(Game)
				}
				(*out.Game).UnmarshalEasyJSON(in)
			}
		case "group_chat_created":
			out.GroupChatCreated = bool(in.Bool())
		case "invoice":
			if in.IsNull() {
				in.Skip()
				out.Invoice = nil
			} else {
				if out.Invoice == nil {
					out.Invoice = new(Invoice)
				}
				(*out.Invoice).UnmarshalEasyJSON(in)
			}
		case "left_chat_member":
			if in.IsNull() {
				in.Skip()
				out.LeftChatMember = nil
			} else {
				if out.LeftChatMember == nil {
					out.LeftChatMember = new(User)
				}
				(*out.LeftChatMember).UnmarshalEasyJSON(in)
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(Location)
				}
				(*out.Location).UnmarshalEasyJSON(in)
			}
		case "message_id":
			out.MessageID = int64(in.Int64())
		case "migrate_from_chat_id":
			out.MigrateFromChatID = int64(in.Int64())
		case "migrate_to_chat_id":
			out.MigrateToChatID = int64(in.Int64())
		case "new_chat_members":
			if in.IsNull() {
				in.Skip()
				out.NewChatMembers = nil
			} else {
				in.Delim('[')
				if out.NewChatMembers == nil {
					if !in.IsDelim(']') {
						out.NewChatMembers = make(MessageNewChatMembers, 0, 8)
					} else {
						out.NewChatMembers = MessageNewChatMembers{}
					}
				} else {
					out.NewChatMembers = (out.NewChatMembers)[:0]
				}
				for !in.IsDelim(']') {
					var v33 *User
					if in.IsNull() {
						in.Skip()
						v33 = nil
					} else {
						if v33 == nil {
							v33 = new(User)
						}
						(*v33).UnmarshalEasyJSON(in)
					}
					out.NewChatMembers = append(out.NewChatMembers, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "new_chat_photo":
			if in.IsNull() {
				in.Skip()
				out.NewChatPhoto = nil
			} else {
				in.Delim('[')
				if out.NewChatPhoto == nil {
					if !in.IsDelim(']') {
						out.NewChatPhoto = make(MessageNewChatPhoto, 0, 8)
					} else {
						out.NewChatPhoto = MessageNewChatPhoto{}
					}
				} else {
					out.NewChatPhoto = (out.NewChatPhoto)[:0]
				}
				for !in.IsDelim(']') {
					var v34 *PhotoSize
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(PhotoSize)
						}
						(*v34).UnmarshalEasyJSON(in)
					}
					out.NewChatPhoto = append(out.NewChatPhoto, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "new_chat_title":
			out.NewChatTitle = string(in.String())
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				in.Delim('[')
				if out.Photo == nil {
					if !in.IsDelim(']') {
						out.Photo = make(MessagePhoto, 0, 8)
					} else {
						out.Photo = MessagePhoto{}
					}
				} else {
					out.Photo = (out.Photo)[:0]
				}
				for !in.IsDelim(']') {
					var v35 *PhotoSize
					if in.IsNull() {
						in.Skip()
						v35 = nil
					} else {
						if v35 == nil {
							v35 = new(PhotoSize)
						}
						(*v35).UnmarshalEasyJSON(in)
					}
					out.Photo = append(out.Photo, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pinned_message":
			if in.IsNull() {
				in.Skip()
				out.PinnedMessage = nil
			} else {
				if out.PinnedMessage == nil {
					out.PinnedMessage = new(Message)
				}
				(*out.PinnedMessage).UnmarshalEasyJSON(in)
			}
		case "reply_to_message":
			if in.IsNull() {
				in.Skip()
				out.ReplyToMessage = nil
			} else {
				if out.ReplyToMessage == nil {
					out.ReplyToMessage = new(Message)
				}
				(*out.ReplyToMessage).UnmarshalEasyJSON(in)
			}
		case "sticker":
			if in.IsNull() {
				in.Skip()
				out.Sticker = nil
			} else {
				if out.Sticker == nil {
					out.Sticker = new(Sticker)
				}
				(*out.Sticker).UnmarshalEasyJSON(in)
			}
		case "successful_payment":
			if in.IsNull() {
				in.Skip()
				out.SuccessfulPayment = nil
			} else {
				if out.SuccessfulPayment == nil {
					out.SuccessfulPayment = new(SuccessfulPayment)
				}
				(*out.SuccessfulPayment).UnmarshalEasyJSON(in)
			}
		case "supergroup_chat_created":
			out.SupergroupChatCreated = bool(in.Bool())
		case "text":
			out.Text = string(in.String())
		case "venue":
			if in.IsNull() {
				in.Skip()
				out.Venue = nil
			} else {
				if out.Venue == nil {
					out.Venue = new(Venue)
				}
				(*out.Venue).UnmarshalEasyJSON(in)
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(Video)
				}
				(*out.Video).UnmarshalEasyJSON(in)
			}
		case "video_note":
			if in.IsNull() {
				in.Skip()
				out.VideoNote = nil
			} else {
				if out.VideoNote == nil {
					out.VideoNote = new(VideoNote)
				}
				(*out.VideoNote).UnmarshalEasyJSON(in)
			}
		case "voice":
			if in.IsNull() {
				in.Skip()
				out.Voice = nil
			} else {
				if out.Voice == nil {
					out.Voice = new(Voice)
				}
				(*out.Voice).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels42(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Audio != nil {
		const prefix string = ",\"audio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Audio).MarshalEasyJSON(out)
	}
	if in.AuthorSignature != "" {
		const prefix string = ",\"author_signature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuthorSignature))
	}
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"caption_entities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CaptionEntities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.CaptionEntities {
				if v36 > 0 {
					out.RawByte(',')
				}
				if v37 == nil {
					out.RawString("null")
				} else {
					(*v37).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.ChannelChatCreated {
		const prefix string = ",\"channel_chat_created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ChannelChatCreated))
	}
	if in.Chat != nil {
		const prefix string = ",\"chat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Chat).MarshalEasyJSON(out)
	}
	if in.ConnectedWebsite != "" {
		const prefix string = ",\"connected_website\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConnectedWebsite))
	}
	if in.Contact != nil {
		const prefix string = ",\"contact\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Contact).MarshalEasyJSON(out)
	}
	if in.Date != 0 {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Date))
	}
	if in.DeleteChatPhoto {
		const prefix string = ",\"delete_chat_photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DeleteChatPhoto))
	}
	if in.Document != nil {
		const prefix string = ",\"document\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Document).MarshalEasyJSON(out)
	}
	if in.EditDate != 0 {
		const prefix string = ",\"edit_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EditDate))
	}
	{
		const prefix string = ",\"entities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Entities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Entities {
				if v38 > 0 {
					out.RawByte(',')
				}
				if v39 == nil {
					out.RawString("null")
				} else {
					(*v39).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.ForwardDate != 0 {
		const prefix string = ",\"forward_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ForwardDate))
	}
	if in.ForwardFrom != nil {
		const prefix string = ",\"forward_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ForwardFrom).MarshalEasyJSON(out)
	}
	if in.ForwardFromChat != nil {
		const prefix string = ",\"forward_from_chat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ForwardFromChat).MarshalEasyJSON(out)
	}
	if in.ForwardFromMessageID != 0 {
		const prefix string = ",\"forward_from_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ForwardFromMessageID))
	}
	if in.ForwardSignature != "" {
		const prefix string = ",\"forward_signature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ForwardSignature))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.From).MarshalEasyJSON(out)
	}
	if in.Game != nil {
		const prefix string = ",\"game\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Game).MarshalEasyJSON(out)
	}
	if in.GroupChatCreated {
		const prefix string = ",\"group_chat_created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.GroupChatCreated))
	}
	if in.Invoice != nil {
		const prefix string = ",\"invoice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Invoice).MarshalEasyJSON(out)
	}
	if in.LeftChatMember != nil {
		const prefix string = ",\"left_chat_member\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.LeftChatMember).MarshalEasyJSON(out)
	}
	if in.Location != nil {
		const prefix string = ",\"location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Location).MarshalEasyJSON(out)
	}
	if in.MessageID != 0 {
		const prefix string = ",\"message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MessageID))
	}
	if in.MigrateFromChatID != 0 {
		const prefix string = ",\"migrate_from_chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MigrateFromChatID))
	}
	if in.MigrateToChatID != 0 {
		const prefix string = ",\"migrate_to_chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MigrateToChatID))
	}
	{
		const prefix string = ",\"new_chat_members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.NewChatMembers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.NewChatMembers {
				if v40 > 0 {
					out.RawByte(',')
				}
				if v41 == nil {
					out.RawString("null")
				} else {
					(*v41).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"new_chat_photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.NewChatPhoto == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.NewChatPhoto {
				if v42 > 0 {
					out.RawByte(',')
				}
				if v43 == nil {
					out.RawString("null")
				} else {
					(*v43).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.NewChatTitle != "" {
		const prefix string = ",\"new_chat_title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NewChatTitle))
	}
	{
		const prefix string = ",\"photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Photo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Photo {
				if v44 > 0 {
					out.RawByte(',')
				}
				if v45 == nil {
					out.RawString("null")
				} else {
					(*v45).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.PinnedMessage != nil {
		const prefix string = ",\"pinned_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PinnedMessage).MarshalEasyJSON(out)
	}
	if in.ReplyToMessage != nil {
		const prefix string = ",\"reply_to_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyToMessage).MarshalEasyJSON(out)
	}
	if in.Sticker != nil {
		const prefix string = ",\"sticker\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Sticker).MarshalEasyJSON(out)
	}
	if in.SuccessfulPayment != nil {
		const prefix string = ",\"successful_payment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SuccessfulPayment).MarshalEasyJSON(out)
	}
	if in.SupergroupChatCreated {
		const prefix string = ",\"supergroup_chat_created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SupergroupChatCreated))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if in.Venue != nil {
		const prefix string = ",\"venue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Venue).MarshalEasyJSON(out)
	}
	if in.Video != nil {
		const prefix string = ",\"video\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Video).MarshalEasyJSON(out)
	}
	if in.VideoNote != nil {
		const prefix string = ",\"video_note\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.VideoNote).MarshalEasyJSON(out)
	}
	if in.Voice != nil {
		const prefix string = ",\"voice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Voice).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels42(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels43(in *jlexer.Lexer, out *MaskPosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "point":
			out.Point = string(in.String())
		case "x_shift":
			out.XShift = float64(in.Float64())
		case "y_shift":
			out.YShift = float64(in.Float64())
		case "zoom":
			out.Zoom = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels43(out *jwriter.Writer, in MaskPosition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Point != "" {
		const prefix string = ",\"point\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Point))
	}
	if in.XShift != 0 {
		const prefix string = ",\"x_shift\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.XShift))
	}
	if in.YShift != 0 {
		const prefix string = ",\"y_shift\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.YShift))
	}
	if in.Zoom != 0 {
		const prefix string = ",\"zoom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Zoom))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MaskPosition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MaskPosition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MaskPosition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MaskPosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels43(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels44(in *jlexer.Lexer, out *Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "latitude":
			out.Latitude = float64(in.Float64())
		case "longitude":
			out.Longitude = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels44(out *jwriter.Writer, in Location) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Latitude != 0 {
		const prefix string = ",\"latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Longitude))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Location) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Location) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Location) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Location) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels44(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels45(in *jlexer.Lexer, out *LabeledPrice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = int64(in.Int64())
		case "label":
			out.Label = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels45(out *jwriter.Writer, in LabeledPrice) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Amount != 0 {
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Amount))
	}
	if in.Label != "" {
		const prefix string = ",\"label\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Label))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LabeledPrice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LabeledPrice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LabeledPrice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LabeledPrice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels45(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels46(in *jlexer.Lexer, out *KeyboardButton) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request_contact":
			out.RequestContact = bool(in.Bool())
		case "request_location":
			out.RequestLocation = bool(in.Bool())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels46(out *jwriter.Writer, in KeyboardButton) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RequestContact {
		const prefix string = ",\"request_contact\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RequestContact))
	}
	if in.RequestLocation {
		const prefix string = ",\"request_location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RequestLocation))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KeyboardButton) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeyboardButton) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeyboardButton) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeyboardButton) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels46(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels47(in *jlexer.Lexer, out *Invoice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency":
			out.Currency = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "start_parameter":
			out.StartParameter = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "total_amount":
			out.TotalAmount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels47(out *jwriter.Writer, in Invoice) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.StartParameter != "" {
		const prefix string = ",\"start_parameter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StartParameter))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.TotalAmount != 0 {
		const prefix string = ",\"total_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TotalAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Invoice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Invoice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Invoice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Invoice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels47(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels48(in *jlexer.Lexer, out *InputVenueMessageContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				if out.Address == nil {
					out.Address = new(string)
				}
				*out.Address = string(in.String())
			}
		case "foursquare_id":
			out.FoursquareID = string(in.String())
		case "latitude":
			if in.IsNull() {
				in.Skip()
				out.Latitude = nil
			} else {
				if out.Latitude == nil {
					out.Latitude = new(float64)
				}
				*out.Latitude = float64(in.Float64())
			}
		case "longitude":
			if in.IsNull() {
				in.Skip()
				out.Longitude = nil
			} else {
				if out.Longitude == nil {
					out.Longitude = new(float64)
				}
				*out.Longitude = float64(in.Float64())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels48(out *jwriter.Writer, in InputVenueMessageContent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Address == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Address))
		}
	}
	if in.FoursquareID != "" {
		const prefix string = ",\"foursquare_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FoursquareID))
	}
	{
		const prefix string = ",\"latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Latitude == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Latitude))
		}
	}
	{
		const prefix string = ",\"longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Longitude == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Longitude))
		}
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputVenueMessageContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputVenueMessageContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputVenueMessageContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputVenueMessageContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels48(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels49(in *jlexer.Lexer, out *InputTextMessageContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "disable_web_page_preview":
			out.DisableWebPagePreview = bool(in.Bool())
		case "message_text":
			if in.IsNull() {
				in.Skip()
				out.MessageText = nil
			} else {
				if out.MessageText == nil {
					out.MessageText = new(string)
				}
				*out.MessageText = string(in.String())
			}
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels49(out *jwriter.Writer, in InputTextMessageContent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DisableWebPagePreview {
		const prefix string = ",\"disable_web_page_preview\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableWebPagePreview))
	}
	{
		const prefix string = ",\"message_text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MessageText == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.MessageText))
		}
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputTextMessageContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputTextMessageContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputTextMessageContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputTextMessageContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels49(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels50(in *jlexer.Lexer, out *InputMediaVideo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "duration":
			out.Duration = int64(in.Int64())
		case "height":
			out.Height = int64(in.Int64())
		case "media":
			out.Media = string(in.String())
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "supports_streaming":
			out.SupportsStreaming = bool(in.Bool())
		case "type":
			out.Type = string(in.String())
		case "width":
			out.Width = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels50(out *jwriter.Writer, in InputMediaVideo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Duration))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	{
		const prefix string = ",\"media\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Media))
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.SupportsStreaming {
		const prefix string = ",\"supports_streaming\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SupportsStreaming))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Width != 0 {
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Width))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputMediaVideo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputMediaVideo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputMediaVideo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputMediaVideo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels50(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels51(in *jlexer.Lexer, out *InputMediaPhoto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "media":
			out.Media = string(in.String())
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels51(out *jwriter.Writer, in InputMediaPhoto) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"media\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Media))
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputMediaPhoto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputMediaPhoto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputMediaPhoto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputMediaPhoto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels51(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels52(in *jlexer.Lexer, out *InputLocationMessageContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "latitude":
			if in.IsNull() {
				in.Skip()
				out.Latitude = nil
			} else {
				if out.Latitude == nil {
					out.Latitude = new(float64)
				}
				*out.Latitude = float64(in.Float64())
			}
		case "live_period":
			out.LivePeriod = int64(in.Int64())
		case "longitude":
			if in.IsNull() {
				in.Skip()
				out.Longitude = nil
			} else {
				if out.Longitude == nil {
					out.Longitude = new(float64)
				}
				*out.Longitude = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels52(out *jwriter.Writer, in InputLocationMessageContent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Latitude == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Latitude))
		}
	}
	if in.LivePeriod != 0 {
		const prefix string = ",\"live_period\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LivePeriod))
	}
	{
		const prefix string = ",\"longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Longitude == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Longitude))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputLocationMessageContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputLocationMessageContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputLocationMessageContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputLocationMessageContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels52(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels53(in *jlexer.Lexer, out *InputContactMessageContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			if in.IsNull() {
				in.Skip()
				out.FirstName = nil
			} else {
				if out.FirstName == nil {
					out.FirstName = new(string)
				}
				*out.FirstName = string(in.String())
			}
		case "last_name":
			out.LastName = string(in.String())
		case "phone_number":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels53(out *jwriter.Writer, in InputContactMessageContent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.FirstName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FirstName))
		}
	}
	if in.LastName != "" {
		const prefix string = ",\"last_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"phone_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PhoneNumber == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PhoneNumber))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputContactMessageContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputContactMessageContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputContactMessageContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputContactMessageContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels53(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels54(in *jlexer.Lexer, out *InlineQueryResultVoice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "type":
			out.Type = InlineType(in.String())
		case "voice_duration":
			out.VoiceDuration = int64(in.Int64())
		case "voice_url":
			if in.IsNull() {
				in.Skip()
				out.VoiceURL = nil
			} else {
				if out.VoiceURL == nil {
					out.VoiceURL = new(string)
				}
				*out.VoiceURL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels54(out *jwriter.Writer, in InlineQueryResultVoice) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.VoiceDuration != 0 {
		const prefix string = ",\"voice_duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.VoiceDuration))
	}
	{
		const prefix string = ",\"voice_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.VoiceURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.VoiceURL))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultVoice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultVoice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultVoice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultVoice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels54(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels55(in *jlexer.Lexer, out *InlineQueryResultVideo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "mime_type":
			if in.IsNull() {
				in.Skip()
				out.MimeType = nil
			} else {
				if out.MimeType == nil {
					out.MimeType = new(string)
				}
				*out.MimeType = string(in.String())
			}
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "thumb_url":
			if in.IsNull() {
				in.Skip()
				out.ThumbURL = nil
			} else {
				if out.ThumbURL == nil {
					out.ThumbURL = new(string)
				}
				*out.ThumbURL = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "type":
			out.Type = InlineType(in.String())
		case "video_duration":
			out.VideoDuration = int64(in.Int64())
		case "video_height":
			out.VideoHeight = int64(in.Int64())
		case "video_url":
			if in.IsNull() {
				in.Skip()
				out.VideoURL = nil
			} else {
				if out.VideoURL == nil {
					out.VideoURL = new(string)
				}
				*out.VideoURL = string(in.String())
			}
		case "video_width":
			out.VideoWidth = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels55(out *jwriter.Writer, in InlineQueryResultVideo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	{
		const prefix string = ",\"mime_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MimeType == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.MimeType))
		}
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"thumb_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ThumbURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ThumbURL))
		}
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.VideoDuration != 0 {
		const prefix string = ",\"video_duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.VideoDuration))
	}
	if in.VideoHeight != 0 {
		const prefix string = ",\"video_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.VideoHeight))
	}
	{
		const prefix string = ",\"video_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.VideoURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.VideoURL))
		}
	}
	if in.VideoWidth != 0 {
		const prefix string = ",\"video_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.VideoWidth))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultVideo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultVideo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultVideo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultVideo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels55(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels56(in *jlexer.Lexer, out *InlineQueryResultVenue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				if out.Address == nil {
					out.Address = new(string)
				}
				*out.Address = string(in.String())
			}
		case "foursquare_id":
			out.FoursquareID = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "latitude":
			if in.IsNull() {
				in.Skip()
				out.Latitude = nil
			} else {
				if out.Latitude == nil {
					out.Latitude = new(float64)
				}
				*out.Latitude = float64(in.Float64())
			}
		case "longitude":
			if in.IsNull() {
				in.Skip()
				out.Longitude = nil
			} else {
				if out.Longitude == nil {
					out.Longitude = new(float64)
				}
				*out.Longitude = float64(in.Float64())
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "thumb_height":
			out.ThumbHeight = int64(in.Int64())
		case "thumb_url":
			out.ThumbURL = string(in.String())
		case "thumb_width":
			out.ThumbWidth = int64(in.Int64())
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels56(out *jwriter.Writer, in InlineQueryResultVenue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Address == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Address))
		}
	}
	if in.FoursquareID != "" {
		const prefix string = ",\"foursquare_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FoursquareID))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	{
		const prefix string = ",\"latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Latitude == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Latitude))
		}
	}
	{
		const prefix string = ",\"longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Longitude == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Longitude))
		}
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	if in.ThumbHeight != 0 {
		const prefix string = ",\"thumb_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ThumbHeight))
	}
	if in.ThumbURL != "" {
		const prefix string = ",\"thumb_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ThumbURL))
	}
	if in.ThumbWidth != 0 {
		const prefix string = ",\"thumb_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ThumbWidth))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultVenue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultVenue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultVenue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultVenue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels56(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels57(in *jlexer.Lexer, out *InlineQueryResultPhoto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "photo_height":
			out.PhotoHeight = int64(in.Int64())
		case "photo_url":
			if in.IsNull() {
				in.Skip()
				out.PhotoURL = nil
			} else {
				if out.PhotoURL == nil {
					out.PhotoURL = new(string)
				}
				*out.PhotoURL = string(in.String())
			}
		case "photo_width":
			out.PhotoWidth = int64(in.Int64())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "thumb_url":
			if in.IsNull() {
				in.Skip()
				out.ThumbURL = nil
			} else {
				if out.ThumbURL == nil {
					out.ThumbURL = new(string)
				}
				*out.ThumbURL = string(in.String())
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels57(out *jwriter.Writer, in InlineQueryResultPhoto) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.PhotoHeight != 0 {
		const prefix string = ",\"photo_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PhotoHeight))
	}
	{
		const prefix string = ",\"photo_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PhotoURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PhotoURL))
		}
	}
	if in.PhotoWidth != 0 {
		const prefix string = ",\"photo_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PhotoWidth))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"thumb_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ThumbURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ThumbURL))
		}
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultPhoto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultPhoto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultPhoto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultPhoto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels57(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels58(in *jlexer.Lexer, out *InlineQueryResultMpeg4Gif) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "mpeg4_duration":
			out.Mpeg4Duration = int64(in.Int64())
		case "mpeg4_height":
			out.Mpeg4Height = int64(in.Int64())
		case "mpeg4_url":
			if in.IsNull() {
				in.Skip()
				out.Mpeg4URL = nil
			} else {
				if out.Mpeg4URL == nil {
					out.Mpeg4URL = new(string)
				}
				*out.Mpeg4URL = string(in.String())
			}
		case "mpeg4_width":
			out.Mpeg4Width = int64(in.Int64())
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "thumb_url":
			if in.IsNull() {
				in.Skip()
				out.ThumbURL = nil
			} else {
				if out.ThumbURL == nil {
					out.ThumbURL = new(string)
				}
				*out.ThumbURL = string(in.String())
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels58(out *jwriter.Writer, in InlineQueryResultMpeg4Gif) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.Mpeg4Duration != 0 {
		const prefix string = ",\"mpeg4_duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Mpeg4Duration))
	}
	if in.Mpeg4Height != 0 {
		const prefix string = ",\"mpeg4_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Mpeg4Height))
	}
	{
		const prefix string = ",\"mpeg4_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Mpeg4URL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Mpeg4URL))
		}
	}
	if in.Mpeg4Width != 0 {
		const prefix string = ",\"mpeg4_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Mpeg4Width))
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"thumb_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ThumbURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ThumbURL))
		}
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultMpeg4Gif) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultMpeg4Gif) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultMpeg4Gif) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultMpeg4Gif) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels58(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels59(in *jlexer.Lexer, out *InlineQueryResultLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "latitude":
			if in.IsNull() {
				in.Skip()
				out.Latitude = nil
			} else {
				if out.Latitude == nil {
					out.Latitude = new(float64)
				}
				*out.Latitude = float64(in.Float64())
			}
		case "live_period":
			out.LivePeriod = int64(in.Int64())
		case "longitude":
			if in.IsNull() {
				in.Skip()
				out.Longitude = nil
			} else {
				if out.Longitude == nil {
					out.Longitude = new(float64)
				}
				*out.Longitude = float64(in.Float64())
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "thumb_height":
			out.ThumbHeight = int64(in.Int64())
		case "thumb_url":
			out.ThumbURL = string(in.String())
		case "thumb_width":
			out.ThumbWidth = int64(in.Int64())
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels59(out *jwriter.Writer, in InlineQueryResultLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	{
		const prefix string = ",\"latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Latitude == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Latitude))
		}
	}
	if in.LivePeriod != 0 {
		const prefix string = ",\"live_period\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LivePeriod))
	}
	{
		const prefix string = ",\"longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Longitude == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Longitude))
		}
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	if in.ThumbHeight != 0 {
		const prefix string = ",\"thumb_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ThumbHeight))
	}
	if in.ThumbURL != "" {
		const prefix string = ",\"thumb_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ThumbURL))
	}
	if in.ThumbWidth != 0 {
		const prefix string = ",\"thumb_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ThumbWidth))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels59(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels59(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels59(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels59(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels60(in *jlexer.Lexer, out *InlineQueryResultGif) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "gif_duration":
			out.GifDuration = int64(in.Int64())
		case "gif_height":
			out.GifHeight = int64(in.Int64())
		case "gif_url":
			if in.IsNull() {
				in.Skip()
				out.GifURL = nil
			} else {
				if out.GifURL == nil {
					out.GifURL = new(string)
				}
				*out.GifURL = string(in.String())
			}
		case "gif_width":
			out.GifWidth = int64(in.Int64())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "thumb_url":
			if in.IsNull() {
				in.Skip()
				out.ThumbURL = nil
			} else {
				if out.ThumbURL == nil {
					out.ThumbURL = new(string)
				}
				*out.ThumbURL = string(in.String())
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels60(out *jwriter.Writer, in InlineQueryResultGif) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	if in.GifDuration != 0 {
		const prefix string = ",\"gif_duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.GifDuration))
	}
	if in.GifHeight != 0 {
		const prefix string = ",\"gif_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.GifHeight))
	}
	{
		const prefix string = ",\"gif_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.GifURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.GifURL))
		}
	}
	if in.GifWidth != 0 {
		const prefix string = ",\"gif_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.GifWidth))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"thumb_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ThumbURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ThumbURL))
		}
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultGif) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels60(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultGif) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels60(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultGif) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels60(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultGif) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels60(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels61(in *jlexer.Lexer, out *InlineQueryResultGame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "game_short_name":
			if in.IsNull() {
				in.Skip()
				out.GameShortName = nil
			} else {
				if out.GameShortName == nil {
					out.GameShortName = new(string)
				}
				*out.GameShortName = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels61(out *jwriter.Writer, in InlineQueryResultGame) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"game_short_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.GameShortName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.GameShortName))
		}
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultGame) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels61(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultGame) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels61(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultGame) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels61(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultGame) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels61(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels62(in *jlexer.Lexer, out *InlineQueryResultDocument) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "document_url":
			if in.IsNull() {
				in.Skip()
				out.DocumentURL = nil
			} else {
				if out.DocumentURL == nil {
					out.DocumentURL = new(string)
				}
				*out.DocumentURL = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "mime_type":
			if in.IsNull() {
				in.Skip()
				out.MimeType = nil
			} else {
				if out.MimeType == nil {
					out.MimeType = new(string)
				}
				*out.MimeType = string(in.String())
			}
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "thumb_height":
			out.ThumbHeight = int64(in.Int64())
		case "thumb_url":
			out.ThumbURL = string(in.String())
		case "thumb_width":
			out.ThumbWidth = int64(in.Int64())
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels62(out *jwriter.Writer, in InlineQueryResultDocument) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"document_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DocumentURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.DocumentURL))
		}
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	{
		const prefix string = ",\"mime_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MimeType == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.MimeType))
		}
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	if in.ThumbHeight != 0 {
		const prefix string = ",\"thumb_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ThumbHeight))
	}
	if in.ThumbURL != "" {
		const prefix string = ",\"thumb_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ThumbURL))
	}
	if in.ThumbWidth != 0 {
		const prefix string = ",\"thumb_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ThumbWidth))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultDocument) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels62(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultDocument) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels62(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultDocument) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels62(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultDocument) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels62(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels63(in *jlexer.Lexer, out *InlineQueryResultContact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			if in.IsNull() {
				in.Skip()
				out.FirstName = nil
			} else {
				if out.FirstName == nil {
					out.FirstName = new(string)
				}
				*out.FirstName = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "last_name":
			out.LastName = string(in.String())
		case "phone_number":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "thumb_height":
			out.ThumbHeight = int64(in.Int64())
		case "thumb_url":
			out.ThumbURL = string(in.String())
		case "thumb_width":
			out.ThumbWidth = int64(in.Int64())
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels63(out *jwriter.Writer, in InlineQueryResultContact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.FirstName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FirstName))
		}
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.LastName != "" {
		const prefix string = ",\"last_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"phone_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PhoneNumber == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PhoneNumber))
		}
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	if in.ThumbHeight != 0 {
		const prefix string = ",\"thumb_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ThumbHeight))
	}
	if in.ThumbURL != "" {
		const prefix string = ",\"thumb_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ThumbURL))
	}
	if in.ThumbWidth != 0 {
		const prefix string = ",\"thumb_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ThumbWidth))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultContact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels63(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultContact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels63(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultContact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels63(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultContact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels63(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels64(in *jlexer.Lexer, out *InlineQueryResultCachedVoice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = InlineType(in.String())
		case "voice_file_id":
			if in.IsNull() {
				in.Skip()
				out.VoiceFileID = nil
			} else {
				if out.VoiceFileID == nil {
					out.VoiceFileID = new(string)
				}
				*out.VoiceFileID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels64(out *jwriter.Writer, in InlineQueryResultCachedVoice) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"voice_file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.VoiceFileID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.VoiceFileID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultCachedVoice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels64(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultCachedVoice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels64(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultCachedVoice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels64(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultCachedVoice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels64(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels65(in *jlexer.Lexer, out *InlineQueryResultCachedVideo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = InlineType(in.String())
		case "video_file_id":
			if in.IsNull() {
				in.Skip()
				out.VideoFileID = nil
			} else {
				if out.VideoFileID == nil {
					out.VideoFileID = new(string)
				}
				*out.VideoFileID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels65(out *jwriter.Writer, in InlineQueryResultCachedVideo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"video_file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.VideoFileID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.VideoFileID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultCachedVideo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels65(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultCachedVideo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels65(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultCachedVideo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels65(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultCachedVideo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels65(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels66(in *jlexer.Lexer, out *InlineQueryResultCachedSticker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "sticker_file_id":
			if in.IsNull() {
				in.Skip()
				out.StickerFileID = nil
			} else {
				if out.StickerFileID == nil {
					out.StickerFileID = new(string)
				}
				*out.StickerFileID = string(in.String())
			}
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels66(out *jwriter.Writer, in InlineQueryResultCachedSticker) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"sticker_file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.StickerFileID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.StickerFileID))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultCachedSticker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels66(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultCachedSticker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels66(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultCachedSticker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels66(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultCachedSticker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels66(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels67(in *jlexer.Lexer, out *InlineQueryResultCachedPhoto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "photo_file_id":
			if in.IsNull() {
				in.Skip()
				out.PhotoFileID = nil
			} else {
				if out.PhotoFileID == nil {
					out.PhotoFileID = new(string)
				}
				*out.PhotoFileID = string(in.String())
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels67(out *jwriter.Writer, in InlineQueryResultCachedPhoto) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	{
		const prefix string = ",\"photo_file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PhotoFileID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PhotoFileID))
		}
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultCachedPhoto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels67(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultCachedPhoto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels67(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultCachedPhoto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels67(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultCachedPhoto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels67(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels68(in *jlexer.Lexer, out *InlineQueryResultCachedMpeg4Gif) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "mpeg4_file_id":
			if in.IsNull() {
				in.Skip()
				out.Mpeg4FileID = nil
			} else {
				if out.Mpeg4FileID == nil {
					out.Mpeg4FileID = new(string)
				}
				*out.Mpeg4FileID = string(in.String())
			}
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels68(out *jwriter.Writer, in InlineQueryResultCachedMpeg4Gif) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	{
		const prefix string = ",\"mpeg4_file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Mpeg4FileID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Mpeg4FileID))
		}
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultCachedMpeg4Gif) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels68(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultCachedMpeg4Gif) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels68(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultCachedMpeg4Gif) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels68(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultCachedMpeg4Gif) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels68(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels69(in *jlexer.Lexer, out *InlineQueryResultCachedGif) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "gif_file_id":
			if in.IsNull() {
				in.Skip()
				out.GifFileID = nil
			} else {
				if out.GifFileID == nil {
					out.GifFileID = new(string)
				}
				*out.GifFileID = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels69(out *jwriter.Writer, in InlineQueryResultCachedGif) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"gif_file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.GifFileID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.GifFileID))
		}
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultCachedGif) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels69(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultCachedGif) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels69(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultCachedGif) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels69(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultCachedGif) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels69(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels70(in *jlexer.Lexer, out *InlineQueryResultCachedDocument) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "document_file_id":
			if in.IsNull() {
				in.Skip()
				out.DocumentFileID = nil
			} else {
				if out.DocumentFileID == nil {
					out.DocumentFileID = new(string)
				}
				*out.DocumentFileID = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels70(out *jwriter.Writer, in InlineQueryResultCachedDocument) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"document_file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DocumentFileID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.DocumentFileID))
		}
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultCachedDocument) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels70(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultCachedDocument) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels70(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultCachedDocument) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels70(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultCachedDocument) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels70(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels71(in *jlexer.Lexer, out *InlineQueryResultCachedAudio) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "audio_file_id":
			if in.IsNull() {
				in.Skip()
				out.AudioFileID = nil
			} else {
				if out.AudioFileID == nil {
					out.AudioFileID = new(string)
				}
				*out.AudioFileID = string(in.String())
			}
		case "caption":
			out.Caption = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels71(out *jwriter.Writer, in InlineQueryResultCachedAudio) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"audio_file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AudioFileID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AudioFileID))
		}
	}
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultCachedAudio) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels71(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultCachedAudio) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels71(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultCachedAudio) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels71(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultCachedAudio) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels71(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels72(in *jlexer.Lexer, out *InlineQueryResultAudio) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "audio_duration":
			out.AudioDuration = int64(in.Int64())
		case "audio_url":
			if in.IsNull() {
				in.Skip()
				out.AudioURL = nil
			} else {
				if out.AudioURL == nil {
					out.AudioURL = new(string)
				}
				*out.AudioURL = string(in.String())
			}
		case "caption":
			out.Caption = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "performer":
			out.Performer = string(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels72(out *jwriter.Writer, in InlineQueryResultAudio) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AudioDuration != 0 {
		const prefix string = ",\"audio_duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AudioDuration))
	}
	{
		const prefix string = ",\"audio_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AudioURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AudioURL))
		}
	}
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	if in.InputMessageContent != nil {
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.Performer != "" {
		const prefix string = ",\"performer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Performer))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultAudio) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels72(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultAudio) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels72(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultAudio) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels72(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultAudio) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels72(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels73(in *jlexer.Lexer, out *InlineQueryResultArticle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "hide_url":
			out.HideURL = bool(in.Bool())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "thumb_height":
			out.ThumbHeight = int64(in.Int64())
		case "thumb_url":
			out.ThumbURL = string(in.String())
		case "thumb_width":
			out.ThumbWidth = int64(in.Int64())
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "type":
			out.Type = InlineType(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels73(out *jwriter.Writer, in InlineQueryResultArticle) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.HideURL {
		const prefix string = ",\"hide_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HideURL))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	{
		const prefix string = ",\"input_message_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	if in.ThumbHeight != 0 {
		const prefix string = ",\"thumb_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ThumbHeight))
	}
	if in.ThumbURL != "" {
		const prefix string = ",\"thumb_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ThumbURL))
	}
	if in.ThumbWidth != 0 {
		const prefix string = ",\"thumb_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ThumbWidth))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultArticle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels73(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultArticle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels73(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultArticle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels73(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultArticle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels73(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels74(in *jlexer.Lexer, out *InlineQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(User)
				}
				(*out.From).UnmarshalEasyJSON(in)
			}
		case "id":
			out.ID = string(in.String())
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(Location)
				}
				(*out.Location).UnmarshalEasyJSON(in)
			}
		case "offset":
			out.Offset = string(in.String())
		case "query":
			out.Query = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels74(out *jwriter.Writer, in InlineQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.From).MarshalEasyJSON(out)
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Location != nil {
		const prefix string = ",\"location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Location).MarshalEasyJSON(out)
	}
	if in.Offset != "" {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Offset))
	}
	if in.Query != "" {
		const prefix string = ",\"query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Query))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels74(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels74(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels74(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels74(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels75(in *jlexer.Lexer, out *InlineKeyboardMarkup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "inline_keyboard":
			if in.IsNull() {
				in.Skip()
				out.InlineKeyboard = nil
			} else {
				in.Delim('[')
				if out.InlineKeyboard == nil {
					if !in.IsDelim(']') {
						out.InlineKeyboard = make(InlineKeyboardMarkupInlineKeyboard, 0, 2)
					} else {
						out.InlineKeyboard = InlineKeyboardMarkupInlineKeyboard{}
					}
				} else {
					out.InlineKeyboard = (out.InlineKeyboard)[:0]
				}
				for !in.IsDelim(']') {
					var v46 InlineKeyboardMarkupInlineKeyboardItems
					if in.IsNull() {
						in.Skip()
						v46 = nil
					} else {
						in.Delim('[')
						if v46 == nil {
							if !in.IsDelim(']') {
								v46 = make(InlineKeyboardMarkupInlineKeyboardItems, 0, 8)
							} else {
								v46 = InlineKeyboardMarkupInlineKeyboardItems{}
							}
						} else {
							v46 = (v46)[:0]
						}
						for !in.IsDelim(']') {
							var v47 *InlineKeyboardButton
							if in.IsNull() {
								in.Skip()
								v47 = nil
							} else {
								if v47 == nil {
									v47 = new(InlineKeyboardButton)
								}
								(*v47).UnmarshalEasyJSON(in)
							}
							v46 = append(v46, v47)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InlineKeyboard = append(out.InlineKeyboard, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels75(out *jwriter.Writer, in InlineKeyboardMarkup) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"inline_keyboard\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.InlineKeyboard == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.InlineKeyboard {
				if v48 > 0 {
					out.RawByte(',')
				}
				if v49 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v50, v51 := range v49 {
						if v50 > 0 {
							out.RawByte(',')
						}
						if v51 == nil {
							out.RawString("null")
						} else {
							(*v51).MarshalEasyJSON(out)
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineKeyboardMarkup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels75(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineKeyboardMarkup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels75(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineKeyboardMarkup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels75(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineKeyboardMarkup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels75(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels76(in *jlexer.Lexer, out *InlineKeyboardButton) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "callback_data":
			out.CallbackData = string(in.String())
		case "callback_game":
			if m, ok := out.CallbackGame.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.CallbackGame.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.CallbackGame = in.Interface()
			}
		case "pay":
			out.Pay = bool(in.Bool())
		case "switch_inline_query":
			if in.IsNull() {
				in.Skip()
				out.SwitchInlineQuery = nil
			} else {
				if out.SwitchInlineQuery == nil {
					out.SwitchInlineQuery = new(string)
				}
				*out.SwitchInlineQuery = string(in.String())
			}
		case "switch_inline_query_current_chat":
			if in.IsNull() {
				in.Skip()
				out.SwitchInlineQueryCurrentChat = nil
			} else {
				if out.SwitchInlineQueryCurrentChat == nil {
					out.SwitchInlineQueryCurrentChat = new(string)
				}
				*out.SwitchInlineQueryCurrentChat = string(in.String())
			}
		case "text":
			out.Text = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels76(out *jwriter.Writer, in InlineKeyboardButton) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CallbackData != "" {
		const prefix string = ",\"callback_data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CallbackData))
	}
	if in.CallbackGame != nil {
		const prefix string = ",\"callback_game\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.CallbackGame.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.CallbackGame.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.CallbackGame))
		}
	}
	if in.Pay {
		const prefix string = ",\"pay\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Pay))
	}
	if in.SwitchInlineQuery != nil {
		const prefix string = ",\"switch_inline_query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SwitchInlineQuery))
	}
	if in.SwitchInlineQueryCurrentChat != nil {
		const prefix string = ",\"switch_inline_query_current_chat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SwitchInlineQueryCurrentChat))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineKeyboardButton) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels76(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineKeyboardButton) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels76(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineKeyboardButton) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels76(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineKeyboardButton) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels76(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels77(in *jlexer.Lexer, out *GetUserProfilePhotosOKBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(UserProfilePhotos)
				}
				(*out.Result).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels77(out *jwriter.Writer, in GetUserProfilePhotosOKBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	if in.Result != nil {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Result).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetUserProfilePhotosOKBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels77(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetUserProfilePhotosOKBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels77(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetUserProfilePhotosOKBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels77(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetUserProfilePhotosOKBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels77(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels78(in *jlexer.Lexer, out *GetUpdatesBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allowed_updates":
			if in.IsNull() {
				in.Skip()
				out.AllowedUpdates = nil
			} else {
				in.Delim('[')
				if out.AllowedUpdates == nil {
					if !in.IsDelim(']') {
						out.AllowedUpdates = make([]AllowedUpdate, 0, 4)
					} else {
						out.AllowedUpdates = []AllowedUpdate{}
					}
				} else {
					out.AllowedUpdates = (out.AllowedUpdates)[:0]
				}
				for !in.IsDelim(']') {
					var v52 AllowedUpdate
					v52 = AllowedUpdate(in.String())
					out.AllowedUpdates = append(out.AllowedUpdates, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "limit":
			out.Limit = int64(in.Int64())
		case "offset":
			out.Offset = int64(in.Int64())
		case "timeout":
			out.Timeout = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels78(out *jwriter.Writer, in GetUpdatesBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"allowed_updates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AllowedUpdates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.AllowedUpdates {
				if v53 > 0 {
					out.RawByte(',')
				}
				out.String(string(v54))
			}
			out.RawByte(']')
		}
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Limit))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Offset))
	}
	if in.Timeout != 0 {
		const prefix string = ",\"timeout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Timeout))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetUpdatesBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels78(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetUpdatesBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels78(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetUpdatesBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels78(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetUpdatesBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels78(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels79(in *jlexer.Lexer, out *GetStickerSetOKBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(StickerSet)
				}
				(*out.Result).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels79(out *jwriter.Writer, in GetStickerSetOKBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	if in.Result != nil {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Result).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetStickerSetOKBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels79(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetStickerSetOKBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels79(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetStickerSetOKBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels79(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetStickerSetOKBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels79(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels80(in *jlexer.Lexer, out *GetMeOKBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(User)
				}
				(*out.Result).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels80(out *jwriter.Writer, in GetMeOKBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	if in.Result != nil {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Result).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetMeOKBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels80(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMeOKBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels80(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetMeOKBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels80(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMeOKBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels80(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels81(in *jlexer.Lexer, out *GetGameHighScoresOKBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(GameHighScore)
				}
				(*out.Result).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels81(out *jwriter.Writer, in GetGameHighScoresOKBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	if in.Result != nil {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Result).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetGameHighScoresOKBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels81(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetGameHighScoresOKBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels81(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetGameHighScoresOKBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels81(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetGameHighScoresOKBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels81(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels82(in *jlexer.Lexer, out *GetFileOKBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(File)
				}
				(*out.Result).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels82(out *jwriter.Writer, in GetFileOKBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	if in.Result != nil {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Result).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetFileOKBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels82(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetFileOKBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels82(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetFileOKBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels82(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetFileOKBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels82(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels83(in *jlexer.Lexer, out *GetChatOKBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(Chat)
				}
				(*out.Result).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels83(out *jwriter.Writer, in GetChatOKBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	if in.Result != nil {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Result).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetChatOKBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels83(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetChatOKBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels83(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetChatOKBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels83(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetChatOKBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels83(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels84(in *jlexer.Lexer, out *GetChatMembersCountOKBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			out.Result = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels84(out *jwriter.Writer, in GetChatMembersCountOKBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	if in.Result != 0 {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Result))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetChatMembersCountOKBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels84(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetChatMembersCountOKBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels84(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetChatMembersCountOKBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels84(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetChatMembersCountOKBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels84(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels85(in *jlexer.Lexer, out *GetChatMemberOKBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(ChatMember)
				}
				(*out.Result).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels85(out *jwriter.Writer, in GetChatMemberOKBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	if in.Result != nil {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Result).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetChatMemberOKBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels85(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetChatMemberOKBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels85(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetChatMemberOKBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels85(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetChatMemberOKBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels85(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels86(in *jlexer.Lexer, out *GetChatAdministratorsOKBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				in.Delim('[')
				if out.Result == nil {
					if !in.IsDelim(']') {
						out.Result = make(GetChatAdministratorsOKBodyResult, 0, 8)
					} else {
						out.Result = GetChatAdministratorsOKBodyResult{}
					}
				} else {
					out.Result = (out.Result)[:0]
				}
				for !in.IsDelim(']') {
					var v55 *ChatMember
					if in.IsNull() {
						in.Skip()
						v55 = nil
					} else {
						if v55 == nil {
							v55 = new(ChatMember)
						}
						(*v55).UnmarshalEasyJSON(in)
					}
					out.Result = append(out.Result, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels86(out *jwriter.Writer, in GetChatAdministratorsOKBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	{
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Result == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.Result {
				if v56 > 0 {
					out.RawByte(',')
				}
				if v57 == nil {
					out.RawString("null")
				} else {
					(*v57).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetChatAdministratorsOKBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels86(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetChatAdministratorsOKBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels86(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetChatAdministratorsOKBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels86(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetChatAdministratorsOKBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels86(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels87(in *jlexer.Lexer, out *GameHighScore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "position":
			out.Position = int64(in.Int64())
		case "score":
			out.Score = int64(in.Int64())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels87(out *jwriter.Writer, in GameHighScore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Position != 0 {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Position))
	}
	if in.Score != 0 {
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Score))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameHighScore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels87(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameHighScore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels87(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameHighScore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels87(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameHighScore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels87(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels88(in *jlexer.Lexer, out *Game) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "animation":
			if in.IsNull() {
				in.Skip()
				out.Animation = nil
			} else {
				if out.Animation == nil {
					out.Animation = new(Animation)
				}
				(*out.Animation).UnmarshalEasyJSON(in)
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				in.Delim('[')
				if out.Photo == nil {
					if !in.IsDelim(']') {
						out.Photo = make(GamePhoto, 0, 8)
					} else {
						out.Photo = GamePhoto{}
					}
				} else {
					out.Photo = (out.Photo)[:0]
				}
				for !in.IsDelim(']') {
					var v58 *PhotoSize
					if in.IsNull() {
						in.Skip()
						v58 = nil
					} else {
						if v58 == nil {
							v58 = new(PhotoSize)
						}
						(*v58).UnmarshalEasyJSON(in)
					}
					out.Photo = append(out.Photo, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "text":
			out.Text = string(in.String())
		case "text_entities":
			if in.IsNull() {
				in.Skip()
				out.TextEntities = nil
			} else {
				in.Delim('[')
				if out.TextEntities == nil {
					if !in.IsDelim(']') {
						out.TextEntities = make(GameTextEntities, 0, 8)
					} else {
						out.TextEntities = GameTextEntities{}
					}
				} else {
					out.TextEntities = (out.TextEntities)[:0]
				}
				for !in.IsDelim(']') {
					var v59 *MessageEntity
					if in.IsNull() {
						in.Skip()
						v59 = nil
					} else {
						if v59 == nil {
							v59 = new(MessageEntity)
						}
						(*v59).UnmarshalEasyJSON(in)
					}
					out.TextEntities = append(out.TextEntities, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels88(out *jwriter.Writer, in Game) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Animation != nil {
		const prefix string = ",\"animation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Animation).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Photo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v60, v61 := range in.Photo {
				if v60 > 0 {
					out.RawByte(',')
				}
				if v61 == nil {
					out.RawString("null")
				} else {
					(*v61).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"text_entities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.TextEntities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v62, v63 := range in.TextEntities {
				if v62 > 0 {
					out.RawByte(',')
				}
				if v63 == nil {
					out.RawString("null")
				} else {
					(*v63).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Game) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels88(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Game) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels88(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Game) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels88(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Game) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels88(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels89(in *jlexer.Lexer, out *ForceReply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "force_reply":
			out.ForceReply = bool(in.Bool())
		case "selective":
			out.Selective = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels89(out *jwriter.Writer, in ForceReply) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ForceReply {
		const prefix string = ",\"force_reply\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ForceReply))
	}
	if in.Selective {
		const prefix string = ",\"selective\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Selective))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ForceReply) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels89(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ForceReply) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels89(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ForceReply) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels89(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ForceReply) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels89(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels90(in *jlexer.Lexer, out *File) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file_id":
			out.FileID = string(in.String())
		case "file_path":
			out.FilePath = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels90(out *jwriter.Writer, in File) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FileID != "" {
		const prefix string = ",\"file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FileID))
	}
	if in.FilePath != "" {
		const prefix string = ",\"file_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FilePath))
	}
	if in.FileSize != 0 {
		const prefix string = ",\"file_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FileSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v File) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels90(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v File) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels90(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *File) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels90(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *File) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels90(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels91(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels91(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Error) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels91(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Error) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels91(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Error) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels91(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Error) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels91(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels92(in *jlexer.Lexer, out *EditMessageTextOKBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if m, ok := out.Result.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Result.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Result = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels92(out *jwriter.Writer, in EditMessageTextOKBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	if in.Result != nil {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Result.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Result.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Result))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditMessageTextOKBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels92(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditMessageTextOKBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels92(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditMessageTextOKBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels92(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditMessageTextOKBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels92(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels93(in *jlexer.Lexer, out *EditMessageTextBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_web_page_preview":
			out.DisableWebPagePreview = bool(in.Bool())
		case "inline_message_id":
			out.InlineMessageID = string(in.String())
		case "message_id":
			out.MessageID = int64(in.Int64())
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels93(out *jwriter.Writer, in EditMessageTextBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ChatID != nil {
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.DisableWebPagePreview {
		const prefix string = ",\"disable_web_page_preview\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DisableWebPagePreview))
	}
	if in.InlineMessageID != "" {
		const prefix string = ",\"inline_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InlineMessageID))
	}
	if in.MessageID != 0 {
		const prefix string = ",\"message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MessageID))
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Text == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Text))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditMessageTextBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels93(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditMessageTextBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels93(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditMessageTextBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels93(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditMessageTextBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels93(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels94(in *jlexer.Lexer, out *EditMessageReplyMarkupOKBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if m, ok := out.Result.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Result.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Result = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels94(out *jwriter.Writer, in EditMessageReplyMarkupOKBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	if in.Result != nil {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Result.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Result.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Result))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditMessageReplyMarkupOKBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels94(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditMessageReplyMarkupOKBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels94(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditMessageReplyMarkupOKBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels94(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditMessageReplyMarkupOKBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels94(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels95(in *jlexer.Lexer, out *EditMessageReplyMarkupBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "inline_message_id":
			out.InlineMessageID = string(in.String())
		case "message_id":
			out.MessageID = int64(in.Int64())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels95(out *jwriter.Writer, in EditMessageReplyMarkupBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ChatID != nil {
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.InlineMessageID != "" {
		const prefix string = ",\"inline_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InlineMessageID))
	}
	if in.MessageID != 0 {
		const prefix string = ",\"message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MessageID))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditMessageReplyMarkupBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels95(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditMessageReplyMarkupBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels95(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditMessageReplyMarkupBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels95(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditMessageReplyMarkupBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels95(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels96(in *jlexer.Lexer, out *EditMessageLiveLocationBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "inline_message_id":
			out.InlineMessageID = string(in.String())
		case "latitude":
			if in.IsNull() {
				in.Skip()
				out.Latitude = nil
			} else {
				if out.Latitude == nil {
					out.Latitude = new(float64)
				}
				*out.Latitude = float64(in.Float64())
			}
		case "longitude":
			if in.IsNull() {
				in.Skip()
				out.Longitude = nil
			} else {
				if out.Longitude == nil {
					out.Longitude = new(float64)
				}
				*out.Longitude = float64(in.Float64())
			}
		case "message_id":
			out.MessageID = int64(in.Int64())
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels96(out *jwriter.Writer, in EditMessageLiveLocationBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ChatID != nil {
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.InlineMessageID != "" {
		const prefix string = ",\"inline_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InlineMessageID))
	}
	{
		const prefix string = ",\"latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Latitude == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Latitude))
		}
	}
	{
		const prefix string = ",\"longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Longitude == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Longitude))
		}
	}
	if in.MessageID != 0 {
		const prefix string = ",\"message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MessageID))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditMessageLiveLocationBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels96(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditMessageLiveLocationBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels96(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditMessageLiveLocationBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels96(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditMessageLiveLocationBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels96(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels97(in *jlexer.Lexer, out *EditMessageCaptionOKBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if m, ok := out.Result.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Result.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Result = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels97(out *jwriter.Writer, in EditMessageCaptionOKBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	if in.Result != nil {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Result.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Result.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Result))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditMessageCaptionOKBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels97(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditMessageCaptionOKBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels97(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditMessageCaptionOKBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels97(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditMessageCaptionOKBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels97(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels98(in *jlexer.Lexer, out *EditMessageCaptionBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "inline_message_id":
			out.InlineMessageID = string(in.String())
		case "message_id":
			out.MessageID = int64(in.Int64())
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels98(out *jwriter.Writer, in EditMessageCaptionBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		const prefix string = ",\"caption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Caption))
	}
	if in.ChatID != nil {
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.InlineMessageID != "" {
		const prefix string = ",\"inline_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InlineMessageID))
	}
	if in.MessageID != 0 {
		const prefix string = ",\"message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MessageID))
	}
	if in.ParseMode != "" {
		const prefix string = ",\"parse_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditMessageCaptionBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels98(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditMessageCaptionBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels98(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditMessageCaptionBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels98(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditMessageCaptionBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels98(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels99(in *jlexer.Lexer, out *Document) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file_id":
			out.FileID = string(in.String())
		case "file_name":
			out.FileName = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "mime_type":
			out.MimeType = string(in.String())
		case "thumb":
			if in.IsNull() {
				in.Skip()
				out.Thumb = nil
			} else {
				if out.Thumb == nil {
					out.Thumb = new(PhotoSize)
				}
				(*out.Thumb).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels99(out *jwriter.Writer, in Document) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FileID != "" {
		const prefix string = ",\"file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FileID))
	}
	if in.FileName != "" {
		const prefix string = ",\"file_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FileName))
	}
	if in.FileSize != 0 {
		const prefix string = ",\"file_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FileSize))
	}
	if in.MimeType != "" {
		const prefix string = ",\"mime_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MimeType))
	}
	if in.Thumb != nil {
		const prefix string = ",\"thumb\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Thumb).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Document) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels99(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Document) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels99(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Document) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels99(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Document) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels99(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels100(in *jlexer.Lexer, out *CreateNewStickerSetLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "emojis":
			if in.IsNull() {
				in.Skip()
				out.Emojis = nil
			} else {
				if out.Emojis == nil {
					out.Emojis = new(string)
				}
				*out.Emojis = string(in.String())
			}
		case "is_masks":
			out.IsMasks = bool(in.Bool())
		case "mask_position":
			if in.IsNull() {
				in.Skip()
				out.MaskPosition = nil
			} else {
				if out.MaskPosition == nil {
					out.MaskPosition = new(MaskPosition)
				}
				(*out.MaskPosition).UnmarshalEasyJSON(in)
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "png_sticker":
			if in.IsNull() {
				in.Skip()
				out.PngSticker = nil
			} else {
				if out.PngSticker == nil {
					out.PngSticker = new(string)
				}
				*out.PngSticker = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserID = nil
			} else {
				if out.UserID == nil {
					out.UserID = new(int64)
				}
				*out.UserID = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels100(out *jwriter.Writer, in CreateNewStickerSetLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"emojis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Emojis == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Emojis))
		}
	}
	if in.IsMasks {
		const prefix string = ",\"is_masks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsMasks))
	}
	if in.MaskPosition != nil {
		const prefix string = ",\"mask_position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.MaskPosition).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"png_sticker\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PngSticker == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PngSticker))
		}
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UserID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.UserID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateNewStickerSetLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels100(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateNewStickerSetLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels100(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateNewStickerSetLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels100(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateNewStickerSetLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels100(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels101(in *jlexer.Lexer, out *Contact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "phone_number":
			out.PhoneNumber = string(in.String())
		case "user_id":
			out.UserID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels101(out *jwriter.Writer, in Contact) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FirstName != "" {
		const prefix string = ",\"first_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	if in.LastName != "" {
		const prefix string = ",\"last_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	if in.PhoneNumber != "" {
		const prefix string = ",\"phone_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PhoneNumber))
	}
	if in.UserID != 0 {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Contact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels101(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Contact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels101(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Contact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels101(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Contact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels101(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels102(in *jlexer.Lexer, out *ChosenInlineResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(User)
				}
				(*out.From).UnmarshalEasyJSON(in)
			}
		case "inline_message_id":
			out.InlineMessageID = string(in.String())
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(Location)
				}
				(*out.Location).UnmarshalEasyJSON(in)
			}
		case "query":
			if in.IsNull() {
				in.Skip()
				out.Query = nil
			} else {
				if out.Query == nil {
					out.Query = new(string)
				}
				*out.Query = string(in.String())
			}
		case "result_id":
			if in.IsNull() {
				in.Skip()
				out.ResultID = nil
			} else {
				if out.ResultID == nil {
					out.ResultID = new(string)
				}
				*out.ResultID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels102(out *jwriter.Writer, in ChosenInlineResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.From == nil {
			out.RawString("null")
		} else {
			(*in.From).MarshalEasyJSON(out)
		}
	}
	if in.InlineMessageID != "" {
		const prefix string = ",\"inline_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InlineMessageID))
	}
	if in.Location != nil {
		const prefix string = ",\"location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Location).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Query == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Query))
		}
	}
	{
		const prefix string = ",\"result_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ResultID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ResultID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChosenInlineResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels102(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChosenInlineResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels102(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChosenInlineResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels102(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChosenInlineResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels102(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels103(in *jlexer.Lexer, out *ChatPhoto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "big_file_id":
			out.BigFileID = string(in.String())
		case "small_file_id":
			out.SmallFileID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels103(out *jwriter.Writer, in ChatPhoto) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BigFileID != "" {
		const prefix string = ",\"big_file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BigFileID))
	}
	if in.SmallFileID != "" {
		const prefix string = ",\"small_file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SmallFileID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatPhoto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels103(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatPhoto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels103(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatPhoto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels103(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatPhoto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels103(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels104(in *jlexer.Lexer, out *ChatMember) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "can_add_web_page_previews":
			out.CanAddWebPagePreviews = bool(in.Bool())
		case "can_be_edited":
			out.CanBeEdited = bool(in.Bool())
		case "can_change_info":
			out.CanChangeInfo = bool(in.Bool())
		case "can_delete_messages":
			out.CanDeleteMessages = bool(in.Bool())
		case "can_edit_messages":
			out.CanEditMessages = bool(in.Bool())
		case "can_invite_users":
			out.CanInviteUsers = bool(in.Bool())
		case "can_pin_messages":
			out.CanPinMessages = bool(in.Bool())
		case "can_post_messages":
			out.CanPostMessages = bool(in.Bool())
		case "can_promote_members":
			out.CanPromoteMembers = bool(in.Bool())
		case "can_restrict_members":
			out.CanRestrictMembers = bool(in.Bool())
		case "can_send_media_messages":
			out.CanSendMediaMessages = bool(in.Bool())
		case "can_send_messages":
			out.CanSendMessages = bool(in.Bool())
		case "can_send_other_messages":
			out.CanSendOtherMessages = bool(in.Bool())
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(string)
				}
				*out.Status = string(in.String())
			}
		case "until_date":
			out.UntilDate = int64(in.Int64())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels104(out *jwriter.Writer, in ChatMember) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CanAddWebPagePreviews {
		const prefix string = ",\"can_add_web_page_previews\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanAddWebPagePreviews))
	}
	if in.CanBeEdited {
		const prefix string = ",\"can_be_edited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanBeEdited))
	}
	if in.CanChangeInfo {
		const prefix string = ",\"can_change_info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanChangeInfo))
	}
	if in.CanDeleteMessages {
		const prefix string = ",\"can_delete_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanDeleteMessages))
	}
	if in.CanEditMessages {
		const prefix string = ",\"can_edit_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanEditMessages))
	}
	if in.CanInviteUsers {
		const prefix string = ",\"can_invite_users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanInviteUsers))
	}
	if in.CanPinMessages {
		const prefix string = ",\"can_pin_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanPinMessages))
	}
	if in.CanPostMessages {
		const prefix string = ",\"can_post_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanPostMessages))
	}
	if in.CanPromoteMembers {
		const prefix string = ",\"can_promote_members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanPromoteMembers))
	}
	if in.CanRestrictMembers {
		const prefix string = ",\"can_restrict_members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanRestrictMembers))
	}
	if in.CanSendMediaMessages {
		const prefix string = ",\"can_send_media_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanSendMediaMessages))
	}
	if in.CanSendMessages {
		const prefix string = ",\"can_send_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanSendMessages))
	}
	if in.CanSendOtherMessages {
		const prefix string = ",\"can_send_other_messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanSendOtherMessages))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Status == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Status))
		}
	}
	if in.UntilDate != 0 {
		const prefix string = ",\"until_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UntilDate))
	}
	{
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatMember) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels104(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatMember) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels104(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatMember) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels104(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatMember) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels104(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels105(in *jlexer.Lexer, out *Chat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "all_members_are_administrators":
			out.AllMembersAreAdministrators = bool(in.Bool())
		case "can_set_sticker_set":
			out.CanSetStickerSet = bool(in.Bool())
		case "description":
			out.Description = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "invite_link":
			out.InviteLink = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				if out.Photo == nil {
					out.Photo = new(ChatPhoto)
				}
				(*out.Photo).UnmarshalEasyJSON(in)
			}
		case "pinned_message":
			if in.IsNull() {
				in.Skip()
				out.PinnedMessage = nil
			} else {
				if out.PinnedMessage == nil {
					out.PinnedMessage = new(Message)
				}
				(*out.PinnedMessage).UnmarshalEasyJSON(in)
			}
		case "sticker_set_name":
			out.StickerSetName = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels105(out *jwriter.Writer, in Chat) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AllMembersAreAdministrators {
		const prefix string = ",\"all_members_are_administrators\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AllMembersAreAdministrators))
	}
	if in.CanSetStickerSet {
		const prefix string = ",\"can_set_sticker_set\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanSetStickerSet))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.FirstName != "" {
		const prefix string = ",\"first_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	if in.InviteLink != "" {
		const prefix string = ",\"invite_link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InviteLink))
	}
	if in.LastName != "" {
		const prefix string = ",\"last_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	if in.Photo != nil {
		const prefix string = ",\"photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Photo).MarshalEasyJSON(out)
	}
	if in.PinnedMessage != nil {
		const prefix string = ",\"pinned_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PinnedMessage).MarshalEasyJSON(out)
	}
	if in.StickerSetName != "" {
		const prefix string = ",\"sticker_set_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StickerSetName))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Type == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Type))
		}
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Chat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels105(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Chat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels105(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Chat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels105(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Chat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels105(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels106(in *jlexer.Lexer, out *CallbackQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_instance":
			out.ChatInstance = string(in.String())
		case "data":
			out.Data = string(in.String())
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(User)
				}
				(*out.From).UnmarshalEasyJSON(in)
			}
		case "game_short_name":
			out.GameShortName = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "inline_message_id":
			out.InlineMessageID = string(in.String())
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels106(out *jwriter.Writer, in CallbackQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ChatInstance != "" {
		const prefix string = ",\"chat_instance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChatInstance))
	}
	if in.Data != "" {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Data))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.From).MarshalEasyJSON(out)
	}
	if in.GameShortName != "" {
		const prefix string = ",\"game_short_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GameShortName))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.InlineMessageID != "" {
		const prefix string = ",\"inline_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InlineMessageID))
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Message).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CallbackQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels106(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CallbackQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels106(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CallbackQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels106(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CallbackQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels106(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels107(in *jlexer.Lexer, out *Audio) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "duration":
			out.Duration = int64(in.Int64())
		case "file_id":
			out.FileID = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "mime_type":
			out.MimeType = string(in.String())
		case "performer":
			out.Performer = string(in.String())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels107(out *jwriter.Writer, in Audio) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Duration))
	}
	if in.FileID != "" {
		const prefix string = ",\"file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FileID))
	}
	if in.FileSize != 0 {
		const prefix string = ",\"file_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FileSize))
	}
	if in.MimeType != "" {
		const prefix string = ",\"mime_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MimeType))
	}
	if in.Performer != "" {
		const prefix string = ",\"performer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Performer))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Audio) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels107(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Audio) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels107(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Audio) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels107(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Audio) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels107(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels108(in *jlexer.Lexer, out *AnswerShippingQueryBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error_message":
			out.ErrorMessage = string(in.String())
		case "ok":
			if in.IsNull() {
				in.Skip()
				out.Ok = nil
			} else {
				if out.Ok == nil {
					out.Ok = new(bool)
				}
				*out.Ok = bool(in.Bool())
			}
		case "shipping_options":
			if in.IsNull() {
				in.Skip()
				out.ShippingOptions = nil
			} else {
				in.Delim('[')
				if out.ShippingOptions == nil {
					if !in.IsDelim(']') {
						out.ShippingOptions = make(AnswerShippingQueryBodyShippingOptions, 0, 8)
					} else {
						out.ShippingOptions = AnswerShippingQueryBodyShippingOptions{}
					}
				} else {
					out.ShippingOptions = (out.ShippingOptions)[:0]
				}
				for !in.IsDelim(']') {
					var v64 *ShippingOption
					if in.IsNull() {
						in.Skip()
						v64 = nil
					} else {
						if v64 == nil {
							v64 = new(ShippingOption)
						}
						(*v64).UnmarshalEasyJSON(in)
					}
					out.ShippingOptions = append(out.ShippingOptions, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "shipping_query_id":
			if in.IsNull() {
				in.Skip()
				out.ShippingQueryID = nil
			} else {
				if out.ShippingQueryID == nil {
					out.ShippingQueryID = new(string)
				}
				*out.ShippingQueryID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels108(out *jwriter.Writer, in AnswerShippingQueryBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ErrorMessage != "" {
		const prefix string = ",\"error_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Ok == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Ok))
		}
	}
	{
		const prefix string = ",\"shipping_options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ShippingOptions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.ShippingOptions {
				if v65 > 0 {
					out.RawByte(',')
				}
				if v66 == nil {
					out.RawString("null")
				} else {
					(*v66).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"shipping_query_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ShippingQueryID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ShippingQueryID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnswerShippingQueryBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels108(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnswerShippingQueryBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels108(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnswerShippingQueryBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels108(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnswerShippingQueryBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels108(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels109(in *jlexer.Lexer, out *AnswerInlineQueryBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cache_time":
			out.CacheTime = int64(in.Int64())
		case "inline_query_id":
			if in.IsNull() {
				in.Skip()
				out.InlineQueryID = nil
			} else {
				if out.InlineQueryID == nil {
					out.InlineQueryID = new(string)
				}
				*out.InlineQueryID = string(in.String())
			}
		case "is_personal":
			out.IsPersonal = bool(in.Bool())
		case "next_offset":
			out.NextOffset = string(in.String())
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]interface{}, 0, 4)
					} else {
						out.Results = []interface{}{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v67 interface{}
					if m, ok := v67.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v67.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v67 = in.Interface()
					}
					out.Results = append(out.Results, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "switch_pm_parameter":
			out.SwitchPmParameter = string(in.String())
		case "switch_pm_text":
			out.SwitchPmText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels109(out *jwriter.Writer, in AnswerInlineQueryBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CacheTime != 0 {
		const prefix string = ",\"cache_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CacheTime))
	}
	{
		const prefix string = ",\"inline_query_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.InlineQueryID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.InlineQueryID))
		}
	}
	if in.IsPersonal {
		const prefix string = ",\"is_personal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsPersonal))
	}
	if in.NextOffset != "" {
		const prefix string = ",\"next_offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NextOffset))
	}
	{
		const prefix string = ",\"results\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Results == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.Results {
				if v68 > 0 {
					out.RawByte(',')
				}
				if m, ok := v69.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v69.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v69))
				}
			}
			out.RawByte(']')
		}
	}
	if in.SwitchPmParameter != "" {
		const prefix string = ",\"switch_pm_parameter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SwitchPmParameter))
	}
	if in.SwitchPmText != "" {
		const prefix string = ",\"switch_pm_text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SwitchPmText))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnswerInlineQueryBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels109(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnswerInlineQueryBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels109(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnswerInlineQueryBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels109(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnswerInlineQueryBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels109(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels110(in *jlexer.Lexer, out *AnswerCallbackQueryBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cache_time":
			out.CacheTime = int64(in.Int64())
		case "callback_query_id":
			out.CallbackQueryID = string(in.String())
		case "show_alert":
			out.ShowAlert = bool(in.Bool())
		case "text":
			out.Text = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels110(out *jwriter.Writer, in AnswerCallbackQueryBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CacheTime != 0 {
		const prefix string = ",\"cache_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CacheTime))
	}
	if in.CallbackQueryID != "" {
		const prefix string = ",\"callback_query_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CallbackQueryID))
	}
	if in.ShowAlert {
		const prefix string = ",\"show_alert\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ShowAlert))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnswerCallbackQueryBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels110(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnswerCallbackQueryBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels110(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnswerCallbackQueryBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels110(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnswerCallbackQueryBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels110(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels111(in *jlexer.Lexer, out *Animation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file_id":
			if in.IsNull() {
				in.Skip()
				out.FileID = nil
			} else {
				if out.FileID == nil {
					out.FileID = new(string)
				}
				*out.FileID = string(in.String())
			}
		case "file_name":
			out.FileName = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "mime_type":
			out.MimeType = string(in.String())
		case "thumb":
			if in.IsNull() {
				in.Skip()
				out.Thumb = nil
			} else {
				if out.Thumb == nil {
					out.Thumb = new(PhotoSize)
				}
				(*out.Thumb).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels111(out *jwriter.Writer, in Animation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"file_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.FileID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FileID))
		}
	}
	if in.FileName != "" {
		const prefix string = ",\"file_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FileName))
	}
	if in.FileSize != 0 {
		const prefix string = ",\"file_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FileSize))
	}
	if in.MimeType != "" {
		const prefix string = ",\"mime_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MimeType))
	}
	if in.Thumb != nil {
		const prefix string = ",\"thumb\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Thumb).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Animation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels111(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Animation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels111(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Animation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels111(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Animation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels111(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels112(in *jlexer.Lexer, out *AddStickerToSetLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "emojis":
			if in.IsNull() {
				in.Skip()
				out.Emojis = nil
			} else {
				if out.Emojis == nil {
					out.Emojis = new(string)
				}
				*out.Emojis = string(in.String())
			}
		case "mask_position":
			if in.IsNull() {
				in.Skip()
				out.MaskPosition = nil
			} else {
				if out.MaskPosition == nil {
					out.MaskPosition = new(MaskPosition)
				}
				(*out.MaskPosition).UnmarshalEasyJSON(in)
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "png_sticker":
			if in.IsNull() {
				in.Skip()
				out.PngSticker = nil
			} else {
				if out.PngSticker == nil {
					out.PngSticker = new(string)
				}
				*out.PngSticker = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserID = nil
			} else {
				if out.UserID == nil {
					out.UserID = new(int64)
				}
				*out.UserID = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels112(out *jwriter.Writer, in AddStickerToSetLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"emojis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Emojis == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Emojis))
		}
	}
	if in.MaskPosition != nil {
		const prefix string = ",\"mask_position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.MaskPosition).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"png_sticker\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PngSticker == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PngSticker))
		}
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UserID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.UserID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddStickerToSetLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels112(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddStickerToSetLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels112(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddStickerToSetLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels112(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddStickerToSetLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels112(l, v)
}
