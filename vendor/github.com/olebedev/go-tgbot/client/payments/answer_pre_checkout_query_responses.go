// Code generated by go-swagger; DO NOT EDIT.

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/olebedev/go-tgbot/models"
)

// AnswerPreCheckoutQueryReader is a Reader for the AnswerPreCheckoutQuery structure.
type AnswerPreCheckoutQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AnswerPreCheckoutQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAnswerPreCheckoutQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAnswerPreCheckoutQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAnswerPreCheckoutQueryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAnswerPreCheckoutQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAnswerPreCheckoutQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 420:
		result := NewAnswerPreCheckoutQueryEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAnswerPreCheckoutQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAnswerPreCheckoutQueryOK creates a AnswerPreCheckoutQueryOK with default headers values
func NewAnswerPreCheckoutQueryOK() *AnswerPreCheckoutQueryOK {
	return &AnswerPreCheckoutQueryOK{}
}

/*AnswerPreCheckoutQueryOK handles this case with default header values.

AnswerPreCheckoutQueryOK answer pre checkout query o k
*/
type AnswerPreCheckoutQueryOK struct {
	Payload *models.ResponseBool
}

func (o *AnswerPreCheckoutQueryOK) Error() string {
	return fmt.Sprintf("[GET /bot{token}/answerPreCheckoutQuery][%d] answerPreCheckoutQueryOK  %+v", 200, o.Payload)
}

func (o *AnswerPreCheckoutQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseBool)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnswerPreCheckoutQueryBadRequest creates a AnswerPreCheckoutQueryBadRequest with default headers values
func NewAnswerPreCheckoutQueryBadRequest() *AnswerPreCheckoutQueryBadRequest {
	return &AnswerPreCheckoutQueryBadRequest{}
}

/*AnswerPreCheckoutQueryBadRequest handles this case with default header values.

Bad Request
*/
type AnswerPreCheckoutQueryBadRequest struct {
	Payload *models.Error
}

func (o *AnswerPreCheckoutQueryBadRequest) Error() string {
	return fmt.Sprintf("[GET /bot{token}/answerPreCheckoutQuery][%d] answerPreCheckoutQueryBadRequest  %+v", 400, o.Payload)
}

func (o *AnswerPreCheckoutQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnswerPreCheckoutQueryUnauthorized creates a AnswerPreCheckoutQueryUnauthorized with default headers values
func NewAnswerPreCheckoutQueryUnauthorized() *AnswerPreCheckoutQueryUnauthorized {
	return &AnswerPreCheckoutQueryUnauthorized{}
}

/*AnswerPreCheckoutQueryUnauthorized handles this case with default header values.

Unauthorized
*/
type AnswerPreCheckoutQueryUnauthorized struct {
	Payload *models.Error
}

func (o *AnswerPreCheckoutQueryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /bot{token}/answerPreCheckoutQuery][%d] answerPreCheckoutQueryUnauthorized  %+v", 401, o.Payload)
}

func (o *AnswerPreCheckoutQueryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnswerPreCheckoutQueryForbidden creates a AnswerPreCheckoutQueryForbidden with default headers values
func NewAnswerPreCheckoutQueryForbidden() *AnswerPreCheckoutQueryForbidden {
	return &AnswerPreCheckoutQueryForbidden{}
}

/*AnswerPreCheckoutQueryForbidden handles this case with default header values.

Forbidden
*/
type AnswerPreCheckoutQueryForbidden struct {
	Payload *models.Error
}

func (o *AnswerPreCheckoutQueryForbidden) Error() string {
	return fmt.Sprintf("[GET /bot{token}/answerPreCheckoutQuery][%d] answerPreCheckoutQueryForbidden  %+v", 403, o.Payload)
}

func (o *AnswerPreCheckoutQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnswerPreCheckoutQueryNotFound creates a AnswerPreCheckoutQueryNotFound with default headers values
func NewAnswerPreCheckoutQueryNotFound() *AnswerPreCheckoutQueryNotFound {
	return &AnswerPreCheckoutQueryNotFound{}
}

/*AnswerPreCheckoutQueryNotFound handles this case with default header values.

Not Found
*/
type AnswerPreCheckoutQueryNotFound struct {
	Payload *models.Error
}

func (o *AnswerPreCheckoutQueryNotFound) Error() string {
	return fmt.Sprintf("[GET /bot{token}/answerPreCheckoutQuery][%d] answerPreCheckoutQueryNotFound  %+v", 404, o.Payload)
}

func (o *AnswerPreCheckoutQueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnswerPreCheckoutQueryEnhanceYourCalm creates a AnswerPreCheckoutQueryEnhanceYourCalm with default headers values
func NewAnswerPreCheckoutQueryEnhanceYourCalm() *AnswerPreCheckoutQueryEnhanceYourCalm {
	return &AnswerPreCheckoutQueryEnhanceYourCalm{}
}

/*AnswerPreCheckoutQueryEnhanceYourCalm handles this case with default header values.

Flood
*/
type AnswerPreCheckoutQueryEnhanceYourCalm struct {
	Payload *models.Error
}

func (o *AnswerPreCheckoutQueryEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /bot{token}/answerPreCheckoutQuery][%d] answerPreCheckoutQueryEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *AnswerPreCheckoutQueryEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnswerPreCheckoutQueryInternalServerError creates a AnswerPreCheckoutQueryInternalServerError with default headers values
func NewAnswerPreCheckoutQueryInternalServerError() *AnswerPreCheckoutQueryInternalServerError {
	return &AnswerPreCheckoutQueryInternalServerError{}
}

/*AnswerPreCheckoutQueryInternalServerError handles this case with default header values.

Internal
*/
type AnswerPreCheckoutQueryInternalServerError struct {
	Payload *models.Error
}

func (o *AnswerPreCheckoutQueryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /bot{token}/answerPreCheckoutQuery][%d] answerPreCheckoutQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *AnswerPreCheckoutQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
